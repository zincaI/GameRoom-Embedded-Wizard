$version 13.04

// This is the root component of the entire GUI application.
$rect <36,50,236,90>
$output false
class Application : Core::Root
{
  $rect <810,550,1010,590>
  inherited property Bounds = <0,0,800,480>;

  $rect <20,20,160,60>
  object Views::Image Image
  {
    preset Bounds = <0,0,800,480>;
    preset Bitmap = Application::BackgroudGamingRoom;
  }

  $rect <610,500,790,540>
  inherited method Init()
  {
    if(MusicPlay==true)
    {
    $if (!$prototyper)
    native{playMusic();}
    $endif
    MusicPlay=false;
    }

    trace "is here";
    //if ( IsActiveDialog( true ))
    //{
    //
    //  //GetRoot().PresentDialog( new Application::GuessTheWord,Effects::SlideLeftCentered, Effects::FadeInOutCentered, null, null, null, null, null, null, false );
    //  //    GetRoot().PresentDialog( new Application::GuessTheWord,null, null, null, null, null, null, null, null, false );
    //  GetRoot().SwitchToDialog( new Application::GameRoom,null,null, null, null, null, null, null, null, null, false );
    ////      trace "Actual dialog2g", Owner;
    //}
    GetRoot().SwitchToDialog( new Application::GameRoom, null, null, null, null, null, null, null, null, null, false );



  }

  $rect <810,500,1010,540>
  var bool MusicPlay = true;

  $rect <410,500,610,540>
  slot MusicSLot
  {
    $if (!$prototyper)
    native{isAudioPlaying();}
    $endif 


  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member Image
  $member MusicPlay
  $member MusicSLot
}

$rect <1260,30,1500,70>
$output false
resource Resources::Font Font
{
  attr fontname FontName = Roboto;
  attr fontheight Height = 38;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <50,1050,290,1090>
$output false
resource Resources::Bitmap BackgroudGamingRoom
{
  attr bitmapfile FileName = .\background_entry_room.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// Images
note group Note
{
  attr Bounds = <0,250,1620,1180>;
}

$rect <50,730,290,770>
$output false
resource Resources::Bitmap WordGuessingLogo
{
  attr bitmapfile FileName = .\button_guess_words_game2.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// Classes
note group Note1
{
  attr Bounds = <0,0,490,240>;
}

$rect <36,100,236,140>
$output false
class GuessTheWord : Core::Group
{
  $rect <900,820,1100,860>
  inherited property Bounds = <0,0,800,496>;

  $rect <900,910,1100,950>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <900,870,1100,910>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <20,20,160,60>
  object Views::Image Image
  {
    preset StackingPriority = 10;
    preset Bounds = <177,42,263,118>;
    preset Bitmap = Application::PlaceholderGuessingGame;
  }

  $rect <20,20,160,60>
  object Views::Image Image1
  {
    preset StackingPriority = 10;
    preset Bounds = <293,42,379,118>;
    preset Bitmap = Application::PlaceholderGuessingGame;
  }

  $rect <20,20,160,60>
  object Views::Image Image2
  {
    preset StackingPriority = 10;
    preset Bounds = <413,42,499,118>;
    preset Bitmap = Application::PlaceholderGuessingGame;
  }

  $rect <20,20,160,60>
  object Views::Image Image3
  {
    preset StackingPriority = 10;
    preset Bounds = <534,42,620,118>;
    preset Bitmap = Application::PlaceholderGuessingGame;
  }

  $rect <20,20,160,60>
  object Views::Text FirstLetter
  {
    preset StackingPriority = 10;
    preset Bounds = <185,49,257,112>;
    preset String = "";
    preset Font = Application::WordGuessingGameFont;
  }

  $rect <20,20,160,60>
  object Views::Text SecondLetter
  {
    preset StackingPriority = 10;
    preset Bounds = <300,49,372,112>;
    preset String = "";
    preset Font = Application::WordGuessingGameFont;
  }

  $rect <20,20,160,60>
  object Views::Text ThirdLetter
  {
    preset StackingPriority = 10;
    preset Bounds = <420,49,492,112>;
    preset String = "";
    preset Font = Application::WordGuessingGameFont;
  }

  $rect <20,20,160,60>
  object Views::Text ForthLetter
  {
    preset StackingPriority = 10;
    preset Bounds = <541,49,613,112>;
    preset OnUpdate = null;
    preset String = "";
    preset Font = Application::WordGuessingGameFont;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton q
  {
    preset StackingPriority = 10;
    preset Bounds = <84,189,131,242>;
    preset OnPress = PressLetter;
    preset Icon = Application::q;
    preset Label = "Q";
    preset Appearance = TransparentButton;
  }

  $rect <1109,63,1349,103>
  object WidgetSet::PushButtonConfig TransparentButton;

  $rect <20,20,160,60>
  object WidgetSet::PushButton m
  {
    preset StackingPriority = 10;
    preset Bounds = <521,327,569,382>;
    preset OnPress = PressLetter;
    preset Icon = Application::m;
    preset Label = "M";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton w
  {
    preset StackingPriority = 10;
    preset Bounds = <147,190,202,245>;
    preset OnPress = PressLetter;
    preset Icon = Application::w;
    preset Label = "W";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton e
  {
    preset StackingPriority = 10;
    preset Bounds = <212,190,265,248>;
    preset OnPress = PressLetter;
    preset Icon = Application::e;
    preset Label = "E";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton r
  {
    preset StackingPriority = 10;
    preset Bounds = <280,187,328,242>;
    preset OnPress = PressLetter;
    preset Icon = Application::r;
    preset Label = "R";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton t
  {
    preset StackingPriority = 10;
    preset Bounds = <341,187,389,242>;
    preset OnPress = PressLetter;
    preset Icon = Application::t;
    preset Label = "T";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton y
  {
    preset StackingPriority = 10;
    preset Bounds = <396,187,444,242>;
    preset OnPress = PressLetter;
    preset Icon = Application::y;
    preset Label = "Y";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton u
  {
    preset StackingPriority = 10;
    preset Bounds = <461,188,509,243>;
    preset OnPress = PressLetter;
    preset Icon = Application::u;
    preset Label = "U";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton i
  {
    preset StackingPriority = 10;
    preset Bounds = <527,187,575,242>;
    preset OnPress = PressLetter;
    preset Icon = Application::i;
    preset Label = "I";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton o
  {
    preset StackingPriority = 10;
    preset Bounds = <594,187,642,242>;
    preset OnPress = PressLetter;
    preset Icon = Application::o;
    preset Label = "O";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton p
  {
    preset StackingPriority = 10;
    preset Bounds = <660,187,708,242>;
    preset OnPress = PressLetter;
    preset Icon = Application::p;
    preset Label = "P";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton A
  {
    preset StackingPriority = 9;
    preset Bounds = <98,243,146,325>;
    preset OnPress = PressLetter;
    preset Icon = Application::a;
    preset Label = "A";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton s
  {
    preset StackingPriority = 10;
    preset Bounds = <146,258,194,319>;
    preset OnPress = PressLetter;
    preset Icon = Application::s;
    preset Label = "S";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton d
  {
    preset StackingPriority = 10;
    preset Bounds = <212,260,260,315>;
    preset OnPress = PressLetter;
    preset Icon = Application::d;
    preset Label = "D";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton f
  {
    preset StackingPriority = 10;
    preset Bounds = <280,257,328,312>;
    preset OnPress = PressLetter;
    preset Icon = Application::f;
    preset Label = "F";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton g
  {
    preset StackingPriority = 10;
    preset Bounds = <341,254,389,312>;
    preset OnPress = PressLetter;
    preset Icon = Application::g;
    preset Label = "G";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton h
  {
    preset StackingPriority = 10;
    preset Bounds = <396,256,444,311>;
    preset OnPress = PressLetter;
    preset Icon = Application::h;
    preset Label = "H";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton j
  {
    preset StackingPriority = 10;
    preset Bounds = <461,261,509,316>;
    preset OnPress = PressLetter;
    preset Icon = Application::j;
    preset Label = "J";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton k
  {
    preset StackingPriority = 10;
    preset Bounds = <523,257,571,312>;
    preset OnPress = PressLetter;
    preset Icon = Application::k;
    preset Label = "K";
    preset Appearance = TransparentButton;
  }

  $rect <1390,440,1570,480>
  inherited method Init()
  {
    //Owner.PresentDialog( new Application::GuessTheWord, null, null, null, null, null, null, null, null, false );
    var int32 wordChoice=0;
    RandomChoice.String=string(wordChoice);

    //FirstLetter.String="";
    //SecondLetter.String="";
    //ThirdLetter.String="";
    //ForthLetter.String="";
    //LettersToUse.Visible=false;
    //GuessedLetters.String="";
    //GuessedLetters.Visible=false;
    //wordChoice = math_rand(0, 3);

  }

  // The disclaimer with the guessed letters that were not yet placed in the correct \
  // spot.
  $rect <20,20,160,60>
  object Views::Text GuessedLettersNote
  {
    preset StackingPriority = 15;
    preset Bounds = <68,408,588,472>;
    preset ColorTR = #FFCC2DFF;
    preset ColorTL = #FFDEB9FF;
    preset String = "Don't forget to use these letters:";
    preset Font = Application::WordGuessingGameFont;
    preset Visible = false;
  }

  // Game logic
  note group NoteGameLogic
  {
    attr Bounds = <1380,-10,1990,490>;
  }

  $rect <20,20,160,60>
  object Views::Text GuessedText
  {
    preset StackingPriority = 12;
    preset Bounds = <217,166,549,343>;
    preset Padding = 0;
    preset ColorBR = #D27129FF;
    preset ColorTR = #D27129FF;
    preset ColorTL = #070707FF;
    preset String = "You won!";
    preset Font = Application::WordGuessingGameFontWin;
    preset Visible = false;
  }

  $rect <1740,80,1940,120>
  slot GuessWord
  {
    var string firstOption="0";
    if(ForthLetter.String=="")
    {
        var slot sl = this.UnfilledSpacesSlot;
        signal sl;
    }          
    else
    {
    if(RandomChoice.String==firstOption)
    {
        var slot sl = this.GuessWordGame;
        signal sl;
        if(FirstLetter.Color!=#111111ff)
        FirstLetter.String="";
        
            if(SecondLetter.Color!=#111111ff)
        SecondLetter.String="";
        
            if(ThirdLetter.Color!=#111111ff)
        ThirdLetter.String="";

            if(ForthLetter.Color!=#111111ff)
        ForthLetter.String="";

    }
    //else if(wordChoice==1)
    //{
    //}
    //else if(wordChoice==2)
    //{
    //}
    //else if(wordChoice==3)
    //{
    //}
    }
  }

  $rect <20,20,160,60>
  object Views::Text RandomChoice
  {
    preset Bounds = <1853,504,1953,534>;
    preset String = "Text";
    preset Font = Resources::DefaultFont;
  }

  // Keyboard (for Enter see GuessWord)
  note group Keyboard
  {
    attr Bounds = <1440,30,1700,220>;
  }

  $rect <1740,130,1940,170>
  slot GuessWordGame
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

        if(FirstLetter.String=="G")
        {
           FirstLetter.Color=#111111ff;
           if(GuessedLetters.String!="")
           {
     
           var int32 poz=GuessedLetters.String.find( 'G', 0 );
           if(poz !=0)
             {
             GuessedLetters.String=GuessedLetters.String.remove( poz, 1 );
             if(GuessedLetters.String==" ")
             {
                GuessedLettersNote.Visible=false;
             }
           
           }
        }
        }
        else if(SecondLetter.String=="G" || ThirdLetter.String=="G" || ForthLetter.String=="G")
        {
                GuessedLettersNote.Visible=true;
                            if(GuessedLetters.String[0]!='G' && GuessedLetters.String[1]!='G' && GuessedLetters.String[2]!='G' && GuessedLetters.String[3]!='G')
                {
                GuessedLetters.String=GuessedLetters.String+" G";   
                }
                GuessedLetters.Visible=true;
        }

            if(SecondLetter.String=="A")
        {
           SecondLetter.Color=#111111ff;
            if(GuessedLetters.String!="")
           {
     
           var int32 poz=GuessedLetters.String.find( 'A', 0 );
           if(poz !=0)
             GuessedLetters.String=GuessedLetters.String.remove( poz, 1 );
           
           }
        }
            else if(FirstLetter.String=="A" || ThirdLetter.String=="A" || ForthLetter.String=="A")
        {
                GuessedLettersNote.Visible=true;
                if(GuessedLetters.String[0]!='A' && GuessedLetters.String[1]!='A' && GuessedLetters.String[2]!='A' && GuessedLetters.String[3]!='A')
                {
                GuessedLetters.String=GuessedLetters.String+" A";
                }
                GuessedLetters.Visible=true;
        }

            if(ThirdLetter.String=="M")
        {
           ThirdLetter.Color=#111111ff;
                  var int32 poz=GuessedLetters.String.find( 'M', 0 );
           if(poz !=0)
             GuessedLetters.String=GuessedLetters.String.remove( poz, 1 );
           
        }
        else if(SecondLetter.String=="M" || FirstLetter.String=="M" || ForthLetter.String=="M")
        {
                GuessedLettersNote.Visible=true;            
                if(GuessedLetters.String[0]!='M' && GuessedLetters.String[1]!='M' && GuessedLetters.String[2]!='M' && GuessedLetters.String[3]!='M')
                 {
                GuessedLetters.String=GuessedLetters.String+" M";   
                }
                GuessedLetters.Visible=true;
        }

            if(ForthLetter.String=="E")
        {
           ForthLetter.Color=#111111ff;
                  var int32 poz=GuessedLetters.String.find( 'E', 0 );
           if(poz !=0)
             GuessedLetters.String=GuessedLetters.String.remove( poz, 1 );
           
        }
            else if(SecondLetter.String=="E" || ThirdLetter.String=="E" || FirstLetter.String=="E")
        {
                GuessedLettersNote.Visible=true;
                if(GuessedLetters.String[0]!='E' && GuessedLetters.String[1]!='E' && GuessedLetters.String[2]!='E' && GuessedLetters.String[3]!='E')
                {
                GuessedLetters.String=GuessedLetters.String+" E";
                }
                GuessedLetters.Visible=true;
        }
        
        if(FirstLetter.String=="G" && SecondLetter.String=="A" && ThirdLetter.String=="M" && ForthLetter.String=="E")
    {
                 GuessedText.Visible=true;
                 //FilterKeyboard.Visible=true;
                 RevealFilterTimer.Enabled=true;
                 var slot sl=this.DisableKeyboard;
                 signal sl;
                 GuessedLettersNote.Visible=false;
    }
    else
    {
    var slot changeTrySlot=this.ChangeNumberTries;
    signal  changeTrySlot;
    }

  }

  // Word choices
  note group WordChoices
  {
    attr Bounds = <1710,30,1960,220>;
  }

  $rect <20,20,160,60>
  object Views::Text GuessedLetters
  {
    preset StackingPriority = 15;
    preset Bounds = <545,425,645,455>;
    preset ColorTR = #FFCC2DFF;
    preset ColorTL = #FFDEB9FF;
    preset String = "";
    preset Font = Application::WordGuessingGameFont;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton delete_key
  {
    preset StackingPriority = 10;
    preset Bounds = <585,257,735,307>;
    preset OnPress = PressDelete;
    preset Icon = Application::delete_key;
    preset Label = "";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton enter
  {
    preset StackingPriority = 10;
    preset Bounds = <585,327,735,377>;
    preset OnPress = GuessWord;
    preset Icon = Application::enter;
    preset Label = "Caption";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton l
  {
    preset StackingPriority = 10;
    preset Bounds = <104,322,153,387>;
    preset OnPress = PressLetter;
    preset Icon = Application::l;
    preset Label = "L";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton z
  {
    preset StackingPriority = 10;
    preset Bounds = <153,329,201,379>;
    preset OnPress = PressLetter;
    preset Icon = Application::z;
    preset Label = "Z";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton x
  {
    preset StackingPriority = 10;
    preset Bounds = <217,327,265,377>;
    preset OnPress = PressLetter;
    preset Icon = Application::x;
    preset Label = "X";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton c
  {
    preset StackingPriority = 10;
    preset Bounds = <283,325,325,375>;
    preset OnPress = PressLetter;
    preset Icon = Application::c;
    preset Label = "C";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton v
  {
    preset StackingPriority = 10;
    preset Bounds = <341,327,381,377>;
    preset OnPress = PressLetter;
    preset Icon = Application::v;
    preset Label = "V";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton b
  {
    preset StackingPriority = 10;
    preset Bounds = <406,329,446,379>;
    preset OnPress = PressLetter;
    preset Icon = Application::b;
    preset Label = "B";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton n
  {
    preset StackingPriority = 10;
    preset Bounds = <461,332,510,382>;
    preset OnPress = PressLetter;
    preset Icon = Application::n;
    preset Label = "N";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object Views::Text UnfilledSpaces
  {
    preset StackingPriority = 12;
    preset Bounds = <107,36,735,126>;
    preset ColorTR = #FF7403FF;
    preset String = "Fill all the spaces";
    preset Font = Application::WordGuessingGameFont;
    preset Visible = false;
  }

  $rect <1450,380,1690,420>
  object Core::Timer TimerUnfilledSpaces
  {
    preset OnTrigger = DismissUnfilledSpacesWarning;
    preset Period = 0;
    preset Begin = 1000;
  }

  $rect <1450,330,1690,370>
  slot UnfilledSpacesSlot
  {
    UnfilledSpaces.Visible=true;
    UnfilledSpaces.Color=UnfilledSpacesGradient.Value;
    TimerUnfilledSpaces.Enabled=true;

  }

  $rect <1450,280,1690,320>
  slot DismissUnfilledSpacesWarning
  {
    UnfilledSpaces.Visible=false;

  }

  $rect <1470,160,1670,200>
  slot PressDelete
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(ForthLetter.String!="" && ForthLetter.Color!=#111111ff)
    {
    ForthLetter.String="";
    }
    else if(ThirdLetter.String!="" && ThirdLetter.Color!=#111111ff)
    {
    ThirdLetter.String="";
    }
    else if(SecondLetter.String!="" && SecondLetter.Color!=#111111ff)
    {
    SecondLetter.String="";
    }
    else if(FirstLetter.Color!=#111111ff) FirstLetter.String="";
  }

  $rect <1470,110,1670,150>
  slot PressLetter
  {
    sender; /* the method is called from the sender object */
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    var string toAddLetter;

    var WidgetSet::PushButton currentSender = (WidgetSet::PushButton )sender;

    if(currentSender==null)
    {
      if(LetterKeyHandler.CharCode>='A' && LetterKeyHandler.CharCode<='Z')
      {
        toAddLetter=string(LetterKeyHandler.CharCode);
      }
      else if (LetterKeyHandler.CharCode>='a' && LetterKeyHandler.CharCode<='z')
      {
          toAddLetter=string(LetterKeyHandler.CharCode-32);
      }
    }
    else
    {
       toAddLetter=currentSender.Label;
    }


    if(FirstLetter.String=="")
    {
    FirstLetter.String=toAddLetter;
    }
    else if(SecondLetter.String=="")
    {
    SecondLetter.String=toAddLetter;

    }
    else if(ThirdLetter.String=="")
    {
    ThirdLetter.String=toAddLetter;

    }
    else if(ForthLetter.String=="")
    {
    ForthLetter.String=toAddLetter;

    }


    FilterKeyboard.Visible=true;
    var slot sl = this.DisableKeyboard;
    signal sl;
    ButtonPressed.Enabled=true;



  }

  $rect <889,23,1119,63>
  object Effects::ColorEffect UnfilledSpacesGradient
  {
    preset CycleDuration = 2000;
    preset Enabled = true;
  }

  // Special effects
  note group SpecialEffects
  {
    attr Bounds = <870,-10,1370,780>;
  }

  $rect <1740,290,1940,330>
  object Core::Timer ButtonPressed
  {
    preset OnTrigger = PressButtonEffect;
    preset Period = 0;
    preset Begin = 300;
  }

  // Handling unfilled spaces
  note group HandlingUnfilledSpaces
  {
    attr Bounds = <1440,230,1700,430>;
  }

  // Handling unfilled spaces(also see keyboard above)
  note group HandlingButtonPressed
  {
    attr Bounds = <1710,230,1970,430>;
  }

  $rect <1740,340,1940,380>
  slot PressButtonEffect
  {
    FilterKeyboard.Visible=false;
    var slot sl = this.EnableKeyboard;
    signal sl;
  }

  $rect <20,20,160,60>
  object Views::FilterImage FilterKeyboard
  {
    preset StackingPriority = 11;
    preset Bounds = <74,180,735,393>;
    preset Bitmap = Application::BackgroudGamingRoom;
    preset TintColor = Application::SandColor;
    preset TintIntensity = 5.0;
    preset TintMode = Graphics::TintMode.TintByOpacity;
    preset Opacity = 180;
    preset Visible = false;
  }

  $rect <899,123,1099,163>
  slot DisableKeyboard
  {
     k.Enabled=false;
                 A.Enabled=false;
                 b.Enabled=false;
                 c.Enabled=false;
                 e.Enabled=false;
                 f.Enabled=false;
                 g.Enabled=false;
                 h.Enabled=false;
                 i.Enabled=false;
                 j.Enabled=false;
                 l.Enabled=false;
                 m.Enabled=false;
                 n.Enabled=false;
                 o.Enabled=false;
                 p.Enabled=false;
                 q.Enabled=false;
                 r.Enabled=false;
                 d.Enabled=false;
                 t.Enabled=false;
                 w.Enabled=false;
                 x.Enabled=false;
                 y.Enabled=false;
                 z.Enabled=false;
                 s.Enabled=false;
                 u.Enabled=false;
                 v.Enabled=false;
                 enter.Enabled=false;
                 delete_key.Enabled=false;
  }

  $rect <899,73,1099,113>
  slot EnableKeyboard
  {
     k.Enabled=true;
                 A.Enabled=true;
                 b.Enabled=true;
                 c.Enabled=true;
                 e.Enabled=true;
                 f.Enabled=true;
                 g.Enabled=true;
                 h.Enabled=true;
                 i.Enabled=true;
                 j.Enabled=true;
                 l.Enabled=true;
                 m.Enabled=true;
                 n.Enabled=true;
                 o.Enabled=true;
                 p.Enabled=true;
                 q.Enabled=true;
                 r.Enabled=true;
                 d.Enabled=true;
                 t.Enabled=true;
                 w.Enabled=true;
                 x.Enabled=true;
                 y.Enabled=true;
                 z.Enabled=true;
                 s.Enabled=true;
                 u.Enabled=true;
                 v.Enabled=true;
                 enter.Enabled=true;
                 delete_key.Enabled=true; 
  }

  // This autoobject provides the default customization for the 'push button' widget \
  // (WidgetSet::PushButton) in its medium size variant.
  $rect <1109,113,1349,153>
  object WidgetSet::PushButtonConfig MenuButtonConfig
  {
    preset LabelColorActive = Application::LightOrange;
    preset LabelColorFocused = Application::LightOrange;
    preset LabelColorDisabled = Application::VibrantOrange;
    preset LabelColorDefault = Application::Black;
    preset IconTintActive = Application::LightOrange;
    preset IconTintFocused = Application::VibrantOrange;
    preset IconTintDisabled = Application::DarkOrange;
    preset IconTintDefault = Application::Black;
    preset LabelFont = Resources::FontLarge;
    preset WidgetMinSize = <34,34>;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton MenuButton
  {
    preset StackingPriority = 10;
    preset Bounds = <-24,-5,98,89>;
    preset OnPress = OpenMenu;
    preset Icon = Application::open_menu;
    preset Label = "";
    preset Appearance = MenuButtonConfig;
  }

  $rect <899,480,1099,520>
  slot OpenMenu
  {
    //BlackFilterBlackFilter.Visible=true;
    //GetRoot().PresentDialog( new Application::Menu,Effects::SlideDownCentered, null, null, null, null, null, null, null, false );
    GetRoot().PresentDialog( new Application::GuessTheWordMenu,Effects::SlideDownCentered, null, null, null, null, null, null, null, false );

  }

  $rect <1130,266,1330,306>
  object Core::KeyPressHandler LetterKeyHandler
  {
    preset OnPress = PressLetter;
    preset Filter = Core::KeyCode.AlphaKeys;
  }

  $rect <1130,216,1330,256>
  object Core::KeyPressHandler DeleteKeyHandler
  {
    preset OnPress = PressDelete;
    preset Filter = Core::KeyCode.Delete;
  }

  $rect <920,216,1120,256>
  object Core::KeyPressHandler EnterKeyHandler
  {
    preset OnPress = GuessWord;
    preset Filter = Core::KeyCode.Enter;
  }

  $rect <920,266,1120,306>
  object Core::KeyPressHandler BackspaceKeyHandler
  {
    preset OnPress = PressDelete;
    preset Filter = Core::KeyCode.Backspace;
  }

  $rect <909,370,1109,410>
  object Effects::ColorEffect FilterEffect
  {
    preset OnAnimate = RevealFilter;
    preset Bounces = 3;
    preset Oscillations = 1;
    preset Value2 = #CCC0AF5F;
    preset Value1 = Application::SandColor;
    preset Outlet = ^FilterKeyboard.TintColor;
  }

  $rect <899,430,1109,470>
  object Core::Timer RevealFilterTimer
  {
    preset OnTrigger = RevealFilter;
    preset Period = 0;
    preset Begin = 200;
  }

  $rect <900,720,1130,760>
  slot RevealFilter
  {
    FilterEffect.Enabled=true;
    FilterKeyboard.Visible=true;
    ColorEffect.Enabled=true;
    DisableEffectTimer.Enabled=true;



  }

  $rect <1129,430,1329,470>
  object Core::Timer DisableEffectTimer
  {
    preset OnTrigger = DisableEffect;
    preset Begin = 1500;
  }

  $rect <1119,480,1329,520>
  slot DisableEffect
  {
    FilterEffect.Enabled=false;
    ColorEffect.Enabled=false;
  }

  $rect <1129,370,1329,410>
  object Effects::ColorEffect ColorEffect
  {
    preset Value1 = Application::SandColor;
    preset Outlet = ^GuessedText.Color;
  }

  // Reveal win effect
  note group RevealWinEffectNote
  {
    attr Bounds = <889,330,1349,540>;
  }

  // Physical keyboard
  note group PhysicalKeyboardNote
  {
    attr Bounds = <890,180,1350,320>;
  }

  $rect <1130,650,1330,690>
  slot ChangeNumberTries
  {
    sender; 
    Try--;
    if(Try==0)
    {
    ChangeNumberTryEffect.Enabled=true;
    StopNumberEffectTimer.Enabled=true;

    NumberTry.Bitmap=Application::Digit0;

    LostText.Visible=true;
    RevealFilterTimer.Enabled=true;
    var slot sl=this.DisableKeyboard;
    signal sl;
    GuessedLettersNote.Visible=false;
    GuessedLetters.Visible=false;

    }
    else
    if(Try==1)
    {
    ChangeNumberTryEffect.Enabled=true;
    StopNumberEffectTimer.Enabled=true;
      NumberTry.Bitmap=Application::Digit1;
    }
    else
    if(Try==2)
    {
    ChangeNumberTryEffect.Enabled=true;
    StopNumberEffectTimer.Enabled=true;
      NumberTry.Bitmap=Application::Digit2;
    }
    else
    if(Try==3)
    {
    ChangeNumberTryEffect.Enabled=true;
    StopNumberEffectTimer.Enabled=true;
      NumberTry.Bitmap=Application::Digit3;
    }
    else
    if(Try==4)
    {
    ChangeNumberTryEffect.Enabled=true;
    StopNumberEffectTimer.Enabled=true;
      NumberTry.Bitmap=Application::Digit4;
    }
    else
    if(Try==5)
    {
    ChangeNumberTryEffect.Enabled=true;
    StopNumberEffectTimer.Enabled=true;
      NumberTry.Bitmap=Application::Digit5;
    }
    else
    if(Try==6)
    {
    ChangeNumberTryEffect.Enabled=true;
    StopNumberEffectTimer.Enabled=true;
      NumberTry.Bitmap=Application::Digit6;
    }
    else
    if(Try==7)
    {
    ChangeNumberTryEffect.Enabled=true;
    StopNumberEffectTimer.Enabled=true;
      NumberTry.Bitmap=Application::Digit7;
    }
    else
    if(Try==8)
    {
    ChangeNumberTryEffect.Enabled=true;
      NumberTry.Bitmap=Application::Digit8;
    StopNumberEffectTimer.Enabled=true;
    }
  }

  $rect <20,20,160,60>
  object Views::Image NumberTry
  {
    preset StackingPriority = 10;
    preset Bounds = <715,17,765,67>;
    preset Bitmap = Application::Digit9;
    preset Opacity = 200;
  }

  $rect <1150,720,1350,760>
  var int32 Try = 9;

  $rect <890,650,1110,690>
  object Effects::ColorEffect ChangeNumberTryEffect
  {
    preset Oscillations = 2;
    preset Outlet = ^NumberTry.Color;
  }

  $rect <890,600,1110,640>
  object Core::Timer StopNumberEffectTimer
  {
    preset OnTrigger = StopNumberEffect;
    preset Period = 0;
    preset Begin = 550;
  }

  $rect <1130,600,1330,640>
  slot StopNumberEffect
  {
    sender; 
    ChangeNumberTryEffect.Enabled=false;
  }

  $rect <20,20,160,60>
  object Views::Text LostText
  {
    preset StackingPriority = 12;
    preset Bounds = <37,166,775,343>;
    preset Padding = 0;
    preset ColorBR = #D27129FF;
    preset ColorTR = #D27129FF;
    preset ColorTL = #070707FF;
    preset String = "You lost! The word was GAME";
    preset Font = Application::WordGuessingGameFontWin;
    preset Visible = false;
  }

  // Number tries
  note group NumberTriesNote
  {
    attr Bounds = <880,550,1350,700>;
  }

  $rect <20,20,160,60>
  object Views::Image Background
  {
    preset Bounds = <-7,2,800,496>;
    preset Bitmap = Application::BackgroudGamingRoom;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member UpdateLayout
  $member UpdateViewState
  $member Image
  $member Image1
  $member Image2
  $member Image3
  $member FirstLetter
  $member SecondLetter
  $member ThirdLetter
  $member ForthLetter
  $member q
  $member TransparentButton
  $member m
  $member w
  $member e
  $member r
  $member t
  $member y
  $member u
  $member i
  $member o
  $member p
  $member A
  $member s
  $member d
  $member f
  $member g
  $member h
  $member j
  $member k
  $member GuessedLettersNote
  $member NoteGameLogic
  $member GuessedText
  $member GuessWord
  $member RandomChoice
  $member Keyboard
  $member GuessWordGame
  $member WordChoices
  $member GuessedLetters
  $member delete_key
  $member enter
  $member l
  $member z
  $member x
  $member c
  $member v
  $member b
  $member n
  $member UnfilledSpaces
  $member TimerUnfilledSpaces
  $member UnfilledSpacesSlot
  $member DismissUnfilledSpacesWarning
  $member PressDelete
  $member PressLetter
  $member UnfilledSpacesGradient
  $member SpecialEffects
  $member ButtonPressed
  $member HandlingUnfilledSpaces
  $member HandlingButtonPressed
  $member PressButtonEffect
  $member FilterKeyboard
  $member DisableKeyboard
  $member EnableKeyboard
  $member MenuButtonConfig
  $member MenuButton
  $member OpenMenu
  $member LetterKeyHandler
  $member DeleteKeyHandler
  $member EnterKeyHandler
  $member BackspaceKeyHandler
  $member FilterEffect
  $member RevealFilterTimer
  $member RevealFilter
  $member DisableEffectTimer
  $member DisableEffect
  $member ColorEffect
  $member RevealWinEffectNote
  $member PhysicalKeyboardNote
  $member ChangeNumberTries
  $member NumberTry
  $member Try
  $member ChangeNumberTryEffect
  $member StopNumberEffectTimer
  $member StopNumberEffect
  $member LostText
  $member NumberTriesNote
  $member Background
}

$rect <50,1100,290,1140>
$output false
resource Resources::Bitmap PlaceholderGuessingGame
{
  attr bitmapfile FileName = .\placeholder_guessing_game2.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// Keyboard
note group Keyboard
{
  attr Bounds = <20,320,1170,660>;
}

$rect <100,360,300,400>
$output false
resource Resources::Bitmap q
{
  attr bitmapfile FileName = .\q.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <960,410,1160,450>
$output false
resource Resources::Bitmap m
{
  attr bitmapfile FileName = .\m.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <100,410,300,450>
$output false
resource Resources::Bitmap w
{
  attr bitmapfile FileName = .\w.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <100,460,300,500>
$output false
resource Resources::Bitmap e
{
  attr bitmapfile FileName = .\e.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <100,510,300,550>
$output false
resource Resources::Bitmap r
{
  attr bitmapfile FileName = .\r.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <100,560,300,600>
$output false
resource Resources::Bitmap t
{
  attr bitmapfile FileName = .\t.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <100,610,300,650>
$output false
resource Resources::Bitmap y
{
  attr bitmapfile FileName = .\y.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <330,360,530,400>
$output false
resource Resources::Bitmap u
{
  attr bitmapfile FileName = .\u.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <330,410,530,450>
$output false
resource Resources::Bitmap i
{
  attr bitmapfile FileName = .\i.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <330,460,530,500>
$output false
resource Resources::Bitmap o
{
  attr bitmapfile FileName = .\o.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <330,510,530,550>
$output false
resource Resources::Bitmap p
{
  attr bitmapfile FileName = .\p.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <330,560,530,600>
$output false
resource Resources::Bitmap a
{
  attr bitmapfile FileName = .\a.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <330,610,530,650>
$output false
resource Resources::Bitmap s
{
  attr bitmapfile FileName = .\s.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <540,360,740,400>
$output false
resource Resources::Bitmap d
{
  attr bitmapfile FileName = .\d.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <540,410,740,450>
$output false
resource Resources::Bitmap f
{
  attr bitmapfile FileName = .\f.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <540,460,740,500>
$output false
resource Resources::Bitmap g
{
  attr bitmapfile FileName = .\g.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <540,510,740,550>
$output false
resource Resources::Bitmap h
{
  attr bitmapfile FileName = .\h.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <540,560,740,600>
$output false
resource Resources::Bitmap j
{
  attr bitmapfile FileName = .\j.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <540,610,740,650>
$output false
resource Resources::Bitmap k
{
  attr bitmapfile FileName = .\k.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <750,360,950,400>
$output false
resource Resources::Bitmap l
{
  attr bitmapfile FileName = .\l.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <750,410,950,450>
$output false
resource Resources::Bitmap z
{
  attr bitmapfile FileName = .\z.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <750,460,950,500>
$output false
resource Resources::Bitmap x
{
  attr bitmapfile FileName = .\x.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <750,510,950,550>
$output false
resource Resources::Bitmap c
{
  attr bitmapfile FileName = .\c.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <750,560,950,600>
$output false
resource Resources::Bitmap v
{
  attr bitmapfile FileName = .\v.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <750,610,950,650>
$output false
resource Resources::Bitmap b
{
  attr bitmapfile FileName = .\b.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <960,360,1160,400>
$output false
resource Resources::Bitmap n
{
  attr bitmapfile FileName = .\n.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <960,460,1160,500>
$output false
resource Resources::Bitmap delete_key
{
  attr bitmapfile FileName = .\delete.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <960,510,1160,550>
$output false
resource Resources::Bitmap enter
{
  attr bitmapfile FileName = .\enter.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1260,80,1500,120>
$output false
resource Resources::Font WordGuessingGameFont
{
  attr fontname FontName = Constantia;
  attr fontheight Height = 32;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <50,780,290,820>
$output false
resource Resources::Bitmap OnPressWordGuessingLogo
{
  attr bitmapfile FileName = .\second_icon_guessinggame_for_pressed.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1260,130,1500,170>
$output false
resource Resources::Font WordGuessingGameFontWin
{
  attr fontname FontName = Constantia;
  attr fontheight Height = 50;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = true;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

// Fonts
note group Fonts
{
  attr Bounds = <1230,-10,1530,230>;
}

// Logos
note group Logos
{
  attr Bounds = <20,690,320,1030>;
}

$rect <50,830,290,870>
$output false
resource Resources::Bitmap MemoryGameLogo
{
  attr bitmapfile FileName = .\button_memory_game3.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <50,880,290,920>
$output false
resource Resources::Bitmap OnPressMemoryGameLogo
{
  attr bitmapfile FileName = .\icon_memory_game_after_pressed3.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <256,50,456,90>
$output false
class MemoryGame : Core::Group
{
  $rect <1510,928,1710,968>
  inherited property Bounds = <0,0,800,480>;

  $rect <1510,868,1710,908>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <1510,828,1710,868>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <1460,498,1700,538>
  object WidgetSet::PushButtonConfig PushButtonConfig;

  $rect <20,20,160,60>
  object WidgetSet::PushButton FirstLabyrinth
  {
    preset StackingPriority = 2;
    preset Bounds = <102,36,230,168>;
    preset OnPress = FirstLabyrinthPressed;
    preset ResignAfterHorizontalWipe = false;
    preset Icon = Application::Labyrinth;
    preset Label = "labyrinth1";
    preset Appearance = PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton FirstBlackLeaves
  {
    preset StackingPriority = 2;
    preset Bounds = <261,36,399,168>;
    preset OnPress = FirstBlackLeavesPressed;
    preset Icon = Application::BlackLeaves;
    preset Label = "blackleave1";
    preset Appearance = PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton FirstPendant
  {
    preset StackingPriority = 2;
    preset Bounds = <415,38,552,168>;
    preset OnPress = FirstPendantPressed;
    preset Icon = Application::Pandant;
    preset Label = "pandant1";
    preset Appearance = PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton FirstCoins
  {
    preset StackingPriority = 2;
    preset Bounds = <571,36,710,168>;
    preset OnPress = FirstCoinsPressed;
    preset Icon = Application::WhiteCoins;
    preset Label = "whitecoins1";
    preset Appearance = PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton SecondCoins
  {
    preset StackingPriority = 2;
    preset Bounds = <98,166,233,306>;
    preset OnPress = SecondCoinsPressed;
    preset Icon = Application::WhiteCoins;
    preset Label = "whitecoins2";
    preset Appearance = PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton FirstCup
  {
    preset StackingPriority = 2;
    preset Bounds = <260,168,398,308>;
    preset OnPress = FirstCupPressed;
    preset Icon = Application::cup;
    preset Label = "cup1";
    preset Appearance = PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton FirstGoldLeaves
  {
    preset StackingPriority = 2;
    preset Bounds = <418,168,554,308>;
    preset OnPress = FirstGoldLeavesPressed;
    preset Icon = Application::GoldLeaves;
    preset Label = "goldleaves1";
    preset Appearance = PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton SecondCup
  {
    preset StackingPriority = 2;
    preset Bounds = <567,168,706,308>;
    preset OnPress = SecondCupPressed;
    preset Icon = Application::cup;
    preset Label = "cup2";
    preset Appearance = PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton SecondGoldLeaves
  {
    preset StackingPriority = 2;
    preset Bounds = <98,314,233,452>;
    preset OnPress = SecondGoldLeavesPressed;
    preset Icon = Application::GoldLeaves;
    preset Label = "goldleaves2";
    preset Appearance = PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton SecondPendant
  {
    preset StackingPriority = 2;
    preset Bounds = <260,314,398,452>;
    preset OnPress = SecondPendantPressed;
    preset Icon = Application::Pandant;
    preset Label = "pandant2";
    preset Appearance = PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton SecondLabyrinth
  {
    preset StackingPriority = 2;
    preset Bounds = <416,304,553,463>;
    preset OnPress = SecondLabyrinthPressed;
    preset Icon = Application::Labyrinth;
    preset Label = "labyrinth2";
    preset Appearance = PushButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton SecondBlackLeaves
  {
    preset StackingPriority = 2;
    preset Bounds = <567,302,706,463>;
    preset OnPress = SecondBlackLeavesPressed;
    preset Icon = Application::BlackLeaves;
    preset Label = "blackleave2";
    preset Appearance = PushButtonConfig;
  }

  $rect <1020,198,1220,238>
  inherited method Init()
  {
    OpeningGameTimer.Enabled=true;
    LoseGameTimer.Enabled=true;
    UpdateTimer.Enabled=true;
    VerifyActivePlayingTimer.Enabled=true;


  }

  // Game logic
  note group GameLogic
  {
    attr Bounds = <920,-12,2200,438>;
  }

  // Designs and effects
  note group Design
  {
    attr Bounds = <1430,458,1730,658>;
  }

  // The logic for the first show of cards
  note group FirstShowOfCards
  {
    attr Bounds = <970,58,1270,258>;
  }

  $rect <1020,98,1220,138>
  object Core::Timer OpeningGameTimer
  {
    preset OnTrigger = OpeningGame;
    preset Period = 0;
    preset Begin = 1000;
  }

  $rect <1020,148,1220,188>
  slot OpeningGame
  {
    FirstLabyrinth.Icon=Application::GoldPicture;
    SecondLabyrinth.Icon=Application::GoldPicture;
    FirstBlackLeaves.Icon=Application::GoldPicture;
    SecondBlackLeaves.Icon=Application::GoldPicture;
    FirstPendant.Icon=Application::GoldPicture;
    SecondPendant.Icon=Application::GoldPicture;
    FirstCoins.Icon=Application::GoldPicture;
    SecondCoins.Icon=Application::GoldPicture;
    FirstCup.Icon=Application::GoldPicture;
    SecondCup.Icon=Application::GoldPicture;
    FirstGoldLeaves.Icon=Application::GoldPicture;
    SecondGoldLeaves.Icon=Application::GoldPicture;

  }

  $rect <1330,98,1550,138>
  slot CountActiveCards
  {
    var int32 initialCount=0;

    if(FirstLabyrinth.Icon!=Application::GoldPicture)    initialCount++;

    if(SecondLabyrinth.Icon!=Application::GoldPicture)     initialCount++;
    if(FirstBlackLeaves.Icon!=Application::GoldPicture)    initialCount++;
    if(SecondBlackLeaves.Icon!=Application::GoldPicture)    initialCount++;
    if(FirstPendant.Icon!=Application::GoldPicture)    initialCount++;
    if(SecondPendant.Icon!=Application::GoldPicture)    initialCount++;
    if(FirstCoins.Icon!=Application::GoldPicture)    initialCount++;
    if(SecondCoins.Icon!=Application::GoldPicture)    initialCount++;
    if(FirstCup.Icon!=Application::GoldPicture)    initialCount++;
    if(SecondCup.Icon!=Application::GoldPicture)    initialCount++;
    if(FirstGoldLeaves.Icon!=Application::GoldPicture)    initialCount++;
    if(SecondGoldLeaves.Icon!=Application::GoldPicture)    initialCount++;

    NumberDifferentPictures=initialCount;

  }

  // Cards management
  note group ManageCards
  {
    attr Bounds = <1300,58,2160,418>;
  }

  $rect <1330,188,1570,228>
  slot FirstLabyrinthPressed
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    FirstLabyrinth.Icon=Application::Labyrinth;

    var slot sl=this.CountActiveCards;
    signal sl;

    //var slot sl2=this.VerifyCards;
    //signal sl2;

    RevealCardTimer.Enabled=true;


  }

  $rect <1330,238,1570,278>
  slot SecondLabyrinthPressed
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    SecondLabyrinth.Icon=Application::Labyrinth;

    var slot sl=this.CountActiveCards;
    signal sl;

    //var slot sl2=this.VerifyCards;
    //signal sl2;

    RevealCardTimer.Enabled=true;
  }

  // Revealing cards
  note group RevealingCards
  {
    attr Bounds = <1310,148,2130,398>;
  }

  $rect <1331,288,1570,328>
  slot FirstBlackLeavesPressed
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    FirstBlackLeaves.Icon=Application::BlackLeaves;

    var slot sl=this.CountActiveCards;
    signal sl;

    //var slot sl2=this.VerifyCards;
    //signal sl2;

    RevealCardTimer.Enabled=true;
  }

  $rect <1330,338,1570,378>
  slot SecondBlackLeavesPressed
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    SecondBlackLeaves.Icon=Application::BlackLeaves;

    var slot sl=this.CountActiveCards;
    signal sl;

    //var slot sl2=this.VerifyCards;
    //signal sl2;

    RevealCardTimer.Enabled=true;
  }

  $rect <1600,188,1840,228>
  slot FirstCupPressed
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    FirstCup.Icon=Application::cup;

    var slot sl=this.CountActiveCards;
    signal sl;

    //var slot sl2=this.VerifyCards;
    //signal sl2;

    RevealCardTimer.Enabled=true;
  }

  $rect <1600,238,1840,278>
  slot SecondCupPressed
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    SecondCup.Icon=Application::cup;

    var slot sl=this.CountActiveCards;
    signal sl;

    //var slot sl2=this.VerifyCards;
    //signal sl2;

    RevealCardTimer.Enabled=true;
  }

  $rect <1601,288,1840,328>
  slot FirstPendantPressed
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    FirstPendant.Icon=Application::Pandant;

    var slot sl=this.CountActiveCards;
    signal sl;

    //var slot sl2=this.VerifyCards;
    //signal sl2;

    RevealCardTimer.Enabled=true;
  }

  $rect <1600,338,1840,378>
  slot SecondPendantPressed
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    SecondPendant.Icon=Application::Pandant;

    var slot sl=this.CountActiveCards;
    signal sl;

    //var slot sl2=this.VerifyCards;
    //signal sl2;

    RevealCardTimer.Enabled=true;
  }

  $rect <1860,188,2100,228>
  slot FirstCoinsPressed
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    FirstCoins.Icon=Application::WhiteCoins;

    var slot sl=this.CountActiveCards;
    signal sl;

    //var slot sl2=this.VerifyCards;
    //signal sl2;

    RevealCardTimer.Enabled=true;
  }

  $rect <1860,238,2100,278>
  slot SecondCoinsPressed
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    SecondCoins.Icon=Application::WhiteCoins;

    var slot sl=this.CountActiveCards;
    signal sl;

    //var slot sl2=this.VerifyCards;
    //signal sl2;

    RevealCardTimer.Enabled=true;
  }

  $rect <1861,288,2100,328>
  slot FirstGoldLeavesPressed
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    FirstGoldLeaves.Icon=Application::GoldLeaves;

    var slot sl=this.CountActiveCards;
    signal sl;

    //var slot sl2=this.VerifyCards;
    //signal sl2;

    RevealCardTimer.Enabled=true;
  }

  $rect <1860,338,2100,378>
  slot SecondGoldLeavesPressed
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    SecondGoldLeaves.Icon=Application::GoldLeaves;

    var slot sl=this.CountActiveCards;
    signal sl;

    var slot sl2=this.Schaffle;
    signal sl2;

    RevealCardTimer.Enabled=true;
  }

  $rect <1560,98,1760,138>
  slot VerifyCards
  {
    if(NumberDifferentPictures%2==0)
    {
    //if((FirstLabyrinth.Icon==Application::Labyrinth && SecondLabyrinth.Icon==Application::Labyrinth) || (SecondBlackLeaves.Icon==Application::BlackLeaves && FirstBlackLeaves.Icon==Application::BlackLeaves) || (FirstPendant.Icon==Application::Pandant && SecondPendant.Icon==Application::Pandant) || (FirstCoins.Icon==Application::WhiteCoins && SecondCoins.Icon==Application::WhiteCoins) || (FirstCup.Icon==Application::cup && SecondCup.Icon==Application::cup) || (FirstGoldLeaves.Icon==Application::GoldLeaves && SecondGoldLeaves.Icon==Application::GoldLeaves))
    //{
        if(FirstLabyrinth.Icon!=Application::Labyrinth || SecondLabyrinth.Icon!=Application::Labyrinth)
        {
        FirstLabyrinth.Icon=Application::GoldPicture;
        SecondLabyrinth.Icon=Application::GoldPicture;
        }

        if(SecondBlackLeaves.Icon!=Application::BlackLeaves || FirstBlackLeaves.Icon!=Application::BlackLeaves)
        {
        FirstBlackLeaves.Icon=Application::GoldPicture;
        SecondBlackLeaves.Icon=Application::GoldPicture;
        }

            if(FirstPendant.Icon!=Application::Pandant || SecondPendant.Icon!=Application::Pandant)
        {
        FirstPendant.Icon=Application::GoldPicture;
        SecondPendant.Icon=Application::GoldPicture;
        }

            if(FirstCup.Icon!=Application::cup || SecondCup.Icon!=Application::cup)
        {
        FirstCup.Icon=Application::GoldPicture;
        SecondCup.Icon=Application::GoldPicture;
        }

            if(FirstCoins.Icon!=Application::WhiteCoins || SecondCoins.Icon!=Application::WhiteCoins)
        {
        FirstCoins.Icon=Application::GoldPicture;
        SecondCoins.Icon=Application::GoldPicture;
        }

            if(FirstGoldLeaves.Icon!=Application::GoldLeaves || SecondGoldLeaves.Icon!=Application::GoldLeaves)
        {
        FirstGoldLeaves.Icon=Application::GoldPicture;
        SecondGoldLeaves.Icon=Application::GoldPicture;
        }

    //}   
    //else
    //{
    //
    //}

    NumberDifferentPictures=0;

    var slot sl=this.VerifyWin;
    signal sl;
    }
  }

  $rect <1940,8,2160,48>
  var int32 NumberDifferentPictures;

  $rect <1780,98,1980,138>
  object Core::Timer RevealCardTimer
  {
    preset OnTrigger = VerifyCards;
    preset Period = 0;
    preset Begin = 500;
  }

  $rect <1010,278,1210,318>
  slot VerifyWin
  {
    if(FirstLabyrinth.Icon==Application::Labyrinth && SecondLabyrinth.Icon==Application::Labyrinth && FirstCup.Icon==Application::cup && SecondCup.Icon==Application::cup && FirstPendant.Icon==Application::Pandant && SecondPendant.Icon==Application::Pandant && FirstBlackLeaves.Icon==Application::BlackLeaves && SecondBlackLeaves.Icon==Application::BlackLeaves && FirstCoins.Icon==Application::WhiteCoins && SecondCoins.Icon==Application::WhiteCoins && FirstGoldLeaves.Icon==Application::GoldLeaves && SecondGoldLeaves.Icon==Application::GoldLeaves)
       {

       RevealFilterWinTimer.Enabled=true;
       }

  }

  $rect <20,20,160,60>
  object Views::Text GuessedText
  {
    preset StackingPriority = 4;
    preset Bounds = <164,86,667,386>;
    preset Padding = 0;
    preset ColorBL = #FFFBF6FF;
    preset ColorBR = #D27129FF;
    preset ColorTR = #D27129FF;
    preset ColorTL = #070707FF;
    preset String = "You won!";
    preset Font = Application::WordGuessingGameFontWin;
    preset Color = #FFF36AFF;
    preset Visible = false;
  }

  $rect <20,20,160,60>
  object Views::FilterImage FilterKeyboard
  {
    preset StackingPriority = 3;
    preset Bounds = <86,36,747,453>;
    preset Bitmap = Application::BackgroudGamingRoom;
    preset TintColor = #CCC0AFFF;
    preset TintIntensity = 9.0;
    preset TintMode = Graphics::TintMode.TintByOpacity;
    preset Opacity = 140;
    preset Visible = false;
  }

  $rect <1480,548,1680,588>
  slot Schaffle
  {
    //
    //  var int canvasWidth = 320;
    //  var int canvasHeight = 240;
    //  var int buttonWidth = 50;
    //  var int buttonHeight = 30;
    //
    //  // Generate random positions within the canvas bounds
    //  var int newX = Math::RandomInt32( 0, canvasWidth - buttonWidth );
    //  var int newY = Math::RandomInt32( 0, canvasHeight - buttonHeight );
    //
    //  // Set the new position using Core::Rect
    //  this.Bounds = Core::Rect( newX, newY, newX + buttonWidth, newY + buttonHeight );


  }

  $rect <1510,688,1710,728>
  property int32 Rotate;

  $rect <1510,738,1710,778>
  onset Rotate
  {
    // The value doesn't change - nothing to do.
    if ( pure Rotate == value )
      return;

    // Remember the property's new value.
    pure Rotate = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <1510,778,1710,818>
  onget Rotate
  {
    return pure Rotate;
  }

  $rect <1010,338,1210,378>
  slot OpenMenu
  {
    //BlackFilterBlackFilter.Visible=true;
    //GetRoot().PresentDialog( new Application::Menu,Effects::SlideDownCentered, null, null, null, null, null, null, null, false );
    GetRoot().PresentDialog( new Application::MemoryGameMenu,Effects::SlideDownCentered, null, null, null, null, null, null, null, false );

  }

  // This autoobject provides the default customization for the 'push button' widget \
  // (WidgetSet::PushButton) in its medium size variant.
  $rect <1450,598,1690,638>
  object WidgetSet::PushButtonConfig MenuButtonConfig
  {
    preset LabelColorActive = Application::LightOrange;
    preset LabelColorFocused = Application::LightOrange;
    preset LabelColorDisabled = Application::VibrantOrange;
    preset LabelColorDefault = Application::Black;
    preset IconTintActive = Application::LightOrange;
    preset IconTintFocused = Application::VibrantOrange;
    preset IconTintDisabled = Application::DarkOrange;
    preset IconTintDefault = Application::Black;
    preset LabelFont = Resources::FontLarge;
    preset WidgetMinSize = <34,34>;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton MenuButton
  {
    preset StackingPriority = 2;
    preset Bounds = <-28,-21,86,69>;
    preset OnPress = OpenMenu;
    preset Icon = Application::open_menu;
    preset Label = "";
    preset Appearance = MenuButtonConfig;
  }

  $rect <950,498,1150,538>
  object Effects::ColorEffect FilterEffect
  {
    preset OnAnimate = null;
    preset Bounces = 3;
    preset Oscillations = 1;
    preset Value2 = #CCC0AF6E;
    preset Value1 = Application::SandColor;
    preset Outlet = ^FilterKeyboard.TintColor;
  }

  $rect <1170,498,1360,538>
  object Core::Timer RevealFilterWinTimer
  {
    preset OnTrigger = RevealFilterWin;
    preset Period = 0;
    preset Begin = 200;
  }

  $rect <940,598,1140,638>
  slot RevealFilterWin
  {
    FilterEffect.Enabled=true;
    FilterKeyboard.Visible=true;
    ColorEffect.Enabled=true;
    GuessedText.Visible=true;
    DisableEffectTimer.Enabled=true;



  }

  $rect <1170,548,1360,588>
  object Core::Timer DisableEffectTimer
  {
    preset OnTrigger = DisableEffect;
    preset Begin = 1500;
  }

  $rect <1160,598,1350,638>
  slot DisableEffect
  {
    FilterEffect.Enabled=false;
    ColorEffect.Enabled=false;
  }

  $rect <950,548,1150,588>
  object Effects::ColorEffect ColorEffect
  {
    preset Value2 = #FFFFFFFF;
    preset Value1 = Application::SandColor;
    preset Outlet = ^GuessedText.Color;
  }

  // Reveal win or lose effect
  note group RevealWinEffectNote
  {
    attr Bounds = <930,458,1390,698>;
  }

  $rect <2000,538,2200,578>
  object Core::Timer LoseGameTimer
  {
    preset OnTrigger = LoseGame;
    preset Period = 0;
    preset Begin = 60000;
  }

  $rect <1780,538,1980,578>
  slot LoseGame
  {
    ColorEffect.Outlet=^LostText.Color;
    RevealFilterLoseTimer.Enabled=true;

    var slot sl=this.DisableCards;
    signal sl;

    var slot slotFilter=this.RevealFilterLose;
    signal slotFilter;
  }

  $rect <940,648,1140,688>
  slot RevealFilterLose
  {
    ColorEffect.Outlet=^LostText.Color;
    FilterEffect.Enabled=true;
    FilterKeyboard.Visible=true;
    ColorEffect.Enabled=true;
    LostText.Visible=true;
    DisableEffectTimer.Enabled=true;
    GuessedText.Visible=false;

    FirstLabyrinth.Icon=Application::Labyrinth;
    SecondLabyrinth.Icon=Application::Labyrinth;
    FirstBlackLeaves.Icon=Application::BlackLeaves;
    SecondBlackLeaves.Icon=Application::BlackLeaves;
    FirstGoldLeaves.Icon=Application::GoldLeaves;
    SecondGoldLeaves.Icon=Application::GoldLeaves;
    FirstPendant.Icon=Application::Pandant;
    SecondPendant.Icon=Application::Pandant;
    FirstCoins.Icon=Application::WhiteCoins;
    SecondCoins.Icon=Application::WhiteCoins;
    FirstCup.Icon=Application::cup;
    SecondCup.Icon=Application::cup;











  }

  $rect <20,20,160,60>
  object Views::Text LostText
  {
    preset StackingPriority = 4;
    preset Bounds = <37,152,775,329>;
    preset Padding = 0;
    preset ColorBR = #D27129FF;
    preset ColorTR = #D27129FF;
    preset ColorTL = #070707FF;
    preset String = "You lost!";
    preset Font = Application::WordGuessingGameFontWin;
    preset Visible = false;
  }

  $rect <1010,388,1210,428>
  slot DisableCards
  {
    sender; 

    FirstBlackLeaves.Enabled=false;
    FirstCoins.Enabled=false;
    FirstCup.Enabled=false;
    FirstGoldLeaves.Enabled=false;
    FirstLabyrinth.Enabled=false;
    FirstPendant.Enabled=false;
    SecondBlackLeaves.Enabled=false;
    SecondCoins.Enabled=false;
    SecondCup.Enabled=false;
    SecondGoldLeaves.Enabled=false;
    SecondLabyrinth.Enabled=false;
    SecondPendant.Enabled=false;


  }

  $rect <1160,648,1360,688>
  object Core::Timer RevealFilterLoseTimer
  {
    preset OnTrigger = RevealFilterLose;
    preset Period = 0;
    preset Begin = 200;
  }

  $rect <20,20,160,60>
  object Views::Text TimeLeft
  {
    preset StackingPriority = 2;
    preset Bounds = <710,0,810,53>;
    preset ColorBR = #B38121FF;
    preset ColorTR = #FFC20CFF;
    preset String = "60";
    preset Font = Application::WordGuessingGameFont;
  }

  $rect <1780,588,1980,628>
  slot UpdateTimerSlot
  {
    Time--;
     if(Time>=0) 
     {
    TimeLeft.String=string(Time);
    }
  }

  $rect <2000,588,2200,628>
  object Core::Timer UpdateTimer
  {
    preset OnTrigger = UpdateTimerSlot;
    preset Period = 1000;
    preset Begin = 1000;
  }

  $rect <1780,648,1980,688>
  var int32 Time = 60;

  $rect <20,20,160,60>
  object Views::Image Background
  {
    preset StackingPriority = 1;
    preset Bounds = <4,-1,800,480>;
    preset Bitmap = Application::BackgroudGamingRoom;
  }

  $rect <2000,488,2200,528>
  object Core::Timer VerifyActivePlayingTimer
  {
    preset OnTrigger = VerifyActivePlaying;
    preset Period = 1;
    preset Begin = 1000;
  }

  $rect <1780,488,1980,528>
  slot VerifyActivePlaying
  {
    if( this.IsActiveDialog( true )==false)
    {
    UpdateTimer.Enabled=false;
    LoseGameTimer.Enabled=false;
    ActiveDialogBool=false;
    }

    if(ActiveDialogBool==false&&this.IsActiveDialog( true )==true)
    {

    UpdateTimer.Enabled=true;
    trace Time;
    LoseGameTimer.Period=Time*1000-20000;
    trace   LoseGameTimer.Period;
    LoseGameTimer.Enabled=true;

    ActiveDialogBool=true;
    }


  }

  $rect <2000,648,2200,688>
  var bool ActiveDialogBool = true;

  // Game timer
  note group TimerNote
  {
    attr Bounds = <1750,448,2230,708>;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member UpdateLayout
  $member UpdateViewState
  $member PushButtonConfig
  $member FirstLabyrinth
  $member FirstBlackLeaves
  $member FirstPendant
  $member FirstCoins
  $member SecondCoins
  $member FirstCup
  $member FirstGoldLeaves
  $member SecondCup
  $member SecondGoldLeaves
  $member SecondPendant
  $member SecondLabyrinth
  $member SecondBlackLeaves
  $member GameLogic
  $member Design
  $member FirstShowOfCards
  $member OpeningGameTimer
  $member OpeningGame
  $member CountActiveCards
  $member ManageCards
  $member FirstLabyrinthPressed
  $member SecondLabyrinthPressed
  $member RevealingCards
  $member FirstBlackLeavesPressed
  $member SecondBlackLeavesPressed
  $member FirstCupPressed
  $member SecondCupPressed
  $member FirstPendantPressed
  $member SecondPendantPressed
  $member FirstCoinsPressed
  $member SecondCoinsPressed
  $member FirstGoldLeavesPressed
  $member SecondGoldLeavesPressed
  $member VerifyCards
  $member NumberDifferentPictures
  $member RevealCardTimer
  $member VerifyWin
  $member GuessedText
  $member FilterKeyboard
  $member Schaffle
  $member Rotate
  $member OnSetRotate
  $member OnGetRotate
  $member OpenMenu
  $member MenuButtonConfig
  $member MenuButton
  $member FilterEffect
  $member RevealFilterWinTimer
  $member RevealFilterWin
  $member DisableEffectTimer
  $member DisableEffect
  $member ColorEffect
  $member RevealWinEffectNote
  $member LoseGameTimer
  $member LoseGame
  $member RevealFilterLose
  $member LostText
  $member DisableCards
  $member RevealFilterLoseTimer
  $member TimeLeft
  $member UpdateTimerSlot
  $member UpdateTimer
  $member Time
  $member Background
  $member VerifyActivePlayingTimer
  $member VerifyActivePlaying
  $member ActiveDialogBool
  $member TimerNote
}

$rect <360,730,560,770>
$output false
resource Resources::Bitmap cup
{
  attr bitmapfile FileName = .\cup6.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// Images memory game
note group Note3
{
  attr Bounds = <340,690,640,1080>;
}

$rect <360,780,560,820>
$output false
resource Resources::Bitmap WhiteCoins
{
  attr bitmapfile FileName = .\coins_background.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <360,830,560,870>
$output false
resource Resources::Bitmap BlackLeaves
{
  attr bitmapfile FileName = .\golden_leaves_black_image1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <360,880,560,920>
$output false
resource Resources::Bitmap GoldLeaves
{
  attr bitmapfile FileName = .\golden_leaves_gold_image1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <360,930,560,970>
$output false
resource Resources::Bitmap Pandant
{
  attr bitmapfile FileName = .\pandant_picture2.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <360,980,560,1020>
$output false
resource Resources::Bitmap Labyrinth
{
  attr bitmapfile FileName = .\labyrinth_picture1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <360,1030,560,1070>
$output false
resource Resources::Bitmap GoldPicture
{
  attr bitmapfile FileName = .\blank_picture1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <50,930,290,970>
$output false
resource Resources::Bitmap TilesPuzzleLogo
{
  attr bitmapfile FileName = .\logo_tiles_puzzle1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <50,980,290,1020>
$output false
resource Resources::Bitmap OnPressTilesPuzzleLogo
{
  attr bitmapfile FileName = .\on_press_tiles_puzzle_logo1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <256,100,456,140>
$output false
class TilesPuzzle : Core::Group
{
  $rect <910,756,1110,796>
  inherited property Bounds = <0,0,800,480>;

  $rect <1370,756,1570,796>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <1150,756,1350,796>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <20,20,160,60>
  object Views::Image Image
  {
    preset Bounds = <0,-17,800,480>;
    preset Bitmap = Application::Frame;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton FirstTile
  {
    preset Bounds = <256,78,337,163>;
    preset OnPress = FirstTileMovement;
    preset Icon = Application::NinthTile;
    preset Label = "1";
    preset Appearance = TransparentButton;
  }

  $rect <1920,726,2160,766>
  object WidgetSet::PushButtonConfig TransparentButton;

  $rect <20,20,160,60>
  object WidgetSet::PushButton FourthTile
  {
    preset Bounds = <499,80,580,160>;
    preset OnPress = FourthTileMovement;
    preset Icon = Application::ThirthTile;
    preset Label = "4";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton ThirdTile
  {
    preset Bounds = <418,80,499,160>;
    preset OnPress = ThirdTileMovement;
    preset Icon = Application::EleventhTile;
    preset Label = "3";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton SecondTile
  {
    preset Bounds = <337,78,418,160>;
    preset OnPress = SecondTileMovement;
    preset Icon = Application::FirstTile;
    preset Label = "2";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton FifthTile
  {
    preset Bounds = <255,159,336,244>;
    preset OnPress = FifthTileMovement;
    preset Icon = Application::TenthTile;
    preset Label = "5";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton NinthTile
  {
    preset Bounds = <256,241,337,326>;
    preset OnRelease = null;
    preset OnPress = NinthTileMovement;
    preset Icon = Application::ThirteenTile;
    preset Label = "9";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton ThirteenthTile
  {
    preset Bounds = <256,322,337,407>;
    preset OnPress = ThirteenthTileMovement;
    preset Icon = Application::ForteenthTile;
    preset Label = "13";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton SixthTile
  {
    preset Bounds = <337,159,418,244>;
    preset OnPress = SixthTileMovement;
    preset Icon = Application::SecondTile;
    preset Label = "6";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton SeventhTile
  {
    preset Bounds = <418,158,499,243>;
    preset OnPress = SeventhTileMovement;
    preset Icon = Application::SixthTile;
    preset Label = "7";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton EighthTile
  {
    preset Bounds = <500,158,581,243>;
    preset OnPress = EighthTileMovement;
    preset Icon = Application::ForthTile;
    preset Label = "8";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton TenthTile
  {
    preset Bounds = <337,242,418,323>;
    preset OnPress = TenthTileMovement;
    preset Icon = Application::BackgroudGamingRoom;
    preset Label = "10";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton EleventhTile
  {
    preset Bounds = <419,241,500,326>;
    preset OnPress = EleventhTileMovement;
    preset Icon = Application::FifthTile;
    preset Label = "11";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton TwelfthTile
  {
    preset Bounds = <500,240,581,325>;
    preset OnPress = TwelfthTileMovement;
    preset Icon = Application::SeventhTile;
    preset Label = "12";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton FourteenthTile
  {
    preset Bounds = <338,321,419,406>;
    preset OnPress = FourteenthTileMovement;
    preset Icon = Application::FifteenthTile;
    preset Label = "14";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton FifteenthTile
  {
    preset Bounds = <418,323,499,408>;
    preset OnPress = FifteenthTileMovement;
    preset Icon = Application::EighthTile;
    preset Label = "15";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton SixteenthTile
  {
    preset Bounds = <500,322,581,407>;
    preset OnPress = SixteenthTileMovement;
    preset Icon = Application::TwelfthTile;
    preset Label = "16";
    preset Appearance = TransparentButton;
  }

  $rect <940,126,1140,166>
  var int32 FirstPos = 9;

  $rect <941,176,1141,216>
  var int32 SecondPos = 1;

  $rect <940,276,1140,316>
  var int32 FourthPos = 3;

  $rect <1160,126,1360,166>
  var int32 FifthPos = 10;

  $rect <1160,176,1360,216>
  var int32 SixthPos = 2;

  $rect <1160,226,1360,266>
  var int32 SeventhPos = 6;

  $rect <1160,276,1360,316>
  var int32 EighthPos = 4;

  $rect <1380,126,1580,166>
  var int32 NinthPos = 13;

  $rect <1380,176,1580,216>
  var int32 TenthPos = 0;

  $rect <1380,226,1580,266>
  var int32 EleventhPos = 5;

  $rect <1380,276,1580,316>
  var int32 TwelfthPos = 7;

  $rect <1600,126,1800,166>
  var int32 ThirteenthPos = 14;

  $rect <1600,176,1800,216>
  var int32 FourteenthPos = 15;

  $rect <1600,226,1800,266>
  var int32 FifteenthPos = 8;

  $rect <940,226,1140,266>
  var int32 ThirdPos = 11;

  // Tiles' positions
  note group TilesPositions
  {
    attr Bounds = <900,66,1830,346>;
  }

  // Tiles' movement
  note group TilesMovement
  {
    attr Bounds = <900,356,1830,656>;
  }

  $rect <1600,276,1800,316>
  var int32 SixteenthPos = 12;

  $rect <20,20,160,60>
  object Views::Text GuessedText
  {
    preset StackingPriority = 3;
    preset Bounds = <149,90,652,390>;
    preset Padding = 0;
    preset OnUpdate = null;
    preset ColorBL = #FFFBF6FF;
    preset ColorBR = #D27129FF;
    preset ColorTR = #D27129FF;
    preset ColorTL = #070707FF;
    preset String = "You won!";
    preset Font = Application::WordGuessingGameFontWin;
    preset Color = #FFF36AFF;
    preset Visible = false;
  }

  $rect <930,406,1130,446>
  slot FirstTileMovement
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(SecondPos==0)
    {
    SecondPos=FirstPos;
    FirstPos=0;
    SecondTile.Icon=FirstTile.Icon;
    FirstTile.Icon=Application::BackgroudGamingRoom;
    }

    if(FifthPos==0)
    {
    FifthPos=FirstPos;
    FirstPos=0;
    FifthTile.Icon=FirstTile.Icon;
    FirstTile.Icon=Application::BackgroudGamingRoom;
    }

    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <930,456,1130,496>
  slot SecondTileMovement
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(FirstPos==0)
    {
    FirstPos=SecondPos;
    SecondPos=0;
    FirstTile.Icon=SecondTile.Icon;
    SecondTile.Icon=Application::BackgroudGamingRoom;
    }

    if(SixthPos==0)
    {
    SixthPos=SecondPos;
    SecondPos=0;
    SixthTile.Icon=SecondTile.Icon;
    SecondTile.Icon=Application::BackgroudGamingRoom;
    }

    if(ThirdPos==0)
    {
    ThirdPos=SecondPos;
    SecondPos=0;
    ThirdTile.Icon=SecondTile.Icon;
    SecondTile.Icon=Application::BackgroudGamingRoom;
    }


    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <930,506,1130,546>
  slot ThirdTileMovement
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(SecondPos==0)
    {
    SecondPos=ThirdPos;
    ThirdPos=0;
    SecondTile.Icon=ThirdTile.Icon;
    ThirdTile.Icon=Application::BackgroudGamingRoom;
    }

    if(SeventhPos==0)
    {
    SeventhPos=ThirdPos;
    ThirdPos=0;
    SeventhTile.Icon=ThirdTile.Icon;
    ThirdTile.Icon=Application::BackgroudGamingRoom;
    }


    if(FourthPos==0)
    {
    FourthPos=ThirdPos;
    ThirdPos=0;
    FourthTile.Icon=ThirdTile.Icon;
    ThirdTile.Icon=Application::BackgroudGamingRoom;
    }

    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <930,556,1130,596>
  slot FourthTileMovement
  {
    sender; /* the method is called from the sender object */

    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(ThirdPos==0)
    {
    ThirdPos=FourthPos;
    FourthPos=0;
    ThirdTile.Icon=FourthTile.Icon;
    FourthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(EighthPos==0)
    {
    EighthPos=FourthPos;
    FourthPos=0;
    EighthTile.Icon=FourthTile.Icon;
    FourthTile.Icon=Application::BackgroudGamingRoom;
    }

    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <1150,406,1350,446>
  slot FifthTileMovement
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(FirstPos==0)
    {
    FirstPos=FifthPos;
    FifthPos=0;
    FirstTile.Icon=FifthTile.Icon;
    FifthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(SixthPos==0)
    {
    SixthPos=FifthPos;
    FifthPos=0;
    SixthTile.Icon=FifthTile.Icon;
    FifthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(NinthPos==0)
    {
    NinthPos=FifthPos;
    FifthPos=0;
    NinthTile.Icon=FifthTile.Icon;
    FifthTile.Icon=Application::BackgroudGamingRoom;
    }

    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <1150,456,1350,496>
  slot SixthTileMovement
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(SecondPos==0)
    {
    SecondPos=SixthPos;
    SixthPos=0;
    SecondTile.Icon=SixthTile.Icon;
    SixthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(FifthPos==0)
    {
    FifthPos=SixthPos;
    SixthPos=0;
    FifthTile.Icon=SixthTile.Icon;
    SixthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(SeventhPos==0)
    {
    SeventhPos=SixthPos;
    SixthPos=0;
    SeventhTile.Icon=SixthTile.Icon;
    SixthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(TenthPos==0)
    {
    TenthPos=SixthPos;
    SixthPos=0;
    TenthTile.Icon=SixthTile.Icon;
    SixthTile.Icon=Application::BackgroudGamingRoom;
    }

    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <1150,506,1350,546>
  slot SeventhTileMovement
  {
    sender; /* the method is called from the sender object */

    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(ThirdPos==0)
    {
    ThirdPos=SeventhPos;
    SeventhPos=0;
    ThirdTile.Icon=SeventhTile.Icon;
    SeventhTile.Icon=Application::BackgroudGamingRoom;
    }

    if(SixthPos==0)
    {
    SixthPos=SeventhPos;
    SeventhPos=0;
    SixthTile.Icon=SeventhTile.Icon;
    SeventhTile.Icon=Application::BackgroudGamingRoom;
    }

    if(EighthPos==0)
    {
    EighthPos=SeventhPos;
    SeventhPos=0;
    EighthTile.Icon=SeventhTile.Icon;
    SeventhTile.Icon=Application::BackgroudGamingRoom;
    }

    if(EleventhPos==0)
    {
    EleventhPos=SeventhPos;
    SeventhPos=0;
    EleventhTile.Icon=SeventhTile.Icon;
    SeventhTile.Icon=Application::BackgroudGamingRoom;
    }

    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <1150,556,1350,596>
  slot EighthTileMovement
  {
    sender; /* the method is called from the sender object */

    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(TwelfthPos==0)
    {
    TwelfthPos=EighthPos;
    EighthPos=0;
    TwelfthTile.Icon=EighthTile.Icon;
    EighthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(SeventhPos==0)
    {
    SeventhPos=EighthPos;
    EighthPos=0;
    SeventhTile.Icon=EighthTile.Icon;
    EighthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(FourthPos==0)
    {
    FourthPos=EighthPos;
    EighthPos=0;
    FourthTile.Icon=EighthTile.Icon;
    EighthTile.Icon=Application::BackgroudGamingRoom;
    }

    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <1370,406,1570,446>
  slot NinthTileMovement
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(FifthPos==0)
    {
    FifthPos=NinthPos;
    NinthPos=0;
    FifthTile.Icon=NinthTile.Icon;
    NinthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(TenthPos==0)
    {
    TenthPos=NinthPos;
    NinthPos=0;
    TenthTile.Icon=NinthTile.Icon;
    NinthTile.Icon=Application::BackgroudGamingRoom;

    }

    if(ThirteenthPos==0)
    {
    ThirteenthPos=NinthPos;
    NinthPos=0;
    ThirteenthTile.Icon=NinthTile.Icon;
    NinthTile.Icon=Application::BackgroudGamingRoom;
    }


    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <1370,456,1570,496>
  slot TenthTileMovement
  {
    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(SixthPos==0)
    {
    SixthPos=TenthPos;
    TenthPos=0;
    SixthTile.Icon=TenthTile.Icon;
    TenthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(NinthPos==0)
    {
    NinthPos=TenthPos;
    TenthPos=0;
    NinthTile.Icon=TenthTile.Icon;
    TenthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(EleventhPos==0)
    {
    EleventhPos=TenthPos;
    TenthPos=0;
    EleventhTile.Icon=TenthTile.Icon;
    TenthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(FourteenthPos==0)
    {
    FourteenthPos=TenthPos;
    TenthPos=0;
    FourteenthTile.Icon=TenthTile.Icon;
    TenthTile.Icon=Application::BackgroudGamingRoom;
    }

    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <1370,506,1570,546>
  slot EleventhTileMovement
  {
    sender; /* the method is called from the sender object */

    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(FifteenthPos==0)
    {
    FifteenthPos=EleventhPos;
    EleventhPos=0;
    FifteenthTile.Icon=EleventhTile.Icon;
    EleventhTile.Icon=Application::BackgroudGamingRoom;

    }

           //not tested yet
    if(TwelfthPos==0)
    {
    TwelfthPos=EleventhPos;
    EleventhPos=0;
    TwelfthTile.Icon=EleventhTile.Icon;
    EleventhTile.Icon=Application::BackgroudGamingRoom;
    }

    if(TenthPos==0)
    {
    TenthPos=EleventhPos;
    EleventhPos=0;
    TenthTile.Icon=EleventhTile.Icon;
    EleventhTile.Icon=Application::BackgroudGamingRoom;
    }

    if(SeventhPos==0)
    {
    SeventhPos=EleventhPos;
    EleventhPos=0;
    SeventhTile.Icon=EleventhTile.Icon;
    EleventhTile.Icon=Application::BackgroudGamingRoom;
    }

    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <1370,556,1570,596>
  slot TwelfthTileMovement
  {
    sender; /* the method is called from the sender object */

    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(SixteenthPos==0)
    {
    SixteenthPos=TwelfthPos;
    TwelfthPos=0;
    SixteenthTile.Icon=TwelfthTile.Icon;
    TwelfthTile.Icon=Application::BackgroudGamingRoom;
    }

        //unverified
    if(EighthPos==0)
    {
    EighthPos=TwelfthPos;
    TwelfthPos=0;
    EighthTile.Icon=TwelfthTile.Icon;
    TwelfthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(EleventhPos==0)
    {
    EleventhPos=TwelfthPos;
    TwelfthPos=0;
    EleventhTile.Icon=TwelfthTile.Icon;
    TwelfthTile.Icon=Application::BackgroudGamingRoom;
    }

    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <1590,406,1800,446>
  slot ThirteenthTileMovement
  {
    sender; /* the method is called from the sender object */

    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(FourteenthPos==0)
    {
    FourteenthPos=ThirteenthPos;
    ThirteenthPos=0;
    FourteenthTile.Icon=ThirteenthTile.Icon;
    ThirteenthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(NinthPos==0)
    {
    NinthPos=ThirteenthPos;
    ThirteenthPos=0;
    NinthTile.Icon=ThirteenthTile.Icon;
    ThirteenthTile.Icon=Application::BackgroudGamingRoom;
    }

    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <1590,456,1800,496>
  slot FourteenthTileMovement
  {
    sender; /* the method is called from the sender object */

    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(FifteenthPos==0)
    {
    FifteenthPos=FourteenthPos;
    FourteenthPos=0;
    FifteenthTile.Icon=FourteenthTile.Icon;
    FourteenthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(TenthPos==0)
    {
    TenthPos=FourteenthPos;
    FourteenthPos=0;
    TenthTile.Icon=FourteenthTile.Icon;
    FourteenthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(ThirteenthPos==0)
    {
    ThirteenthPos=FourteenthPos;
    FourteenthPos=0;
    ThirteenthTile.Icon=FourteenthTile.Icon;
    FourteenthTile.Icon=Application::BackgroudGamingRoom;
    }



    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <1590,506,1800,546>
  slot FifteenthTileMovement
  {
    sender; /* the method is called from the sender object */

    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(SixteenthPos==0)
    {
    SixteenthPos=FifteenthPos;
    FifteenthPos=0;
    SixteenthTile.Icon=FifteenthTile.Icon;
    FifteenthTile.Icon=Application::BackgroudGamingRoom;

    }

    if(EleventhPos==0)
    {
    EleventhPos=FifteenthPos;
    FifteenthPos=0;
    EleventhTile.Icon=FifteenthTile.Icon;
    FifteenthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(FourteenthPos==0)
    {
    FourteenthPos=FifteenthPos;
    FifteenthPos=0;
    FourteenthTile.Icon=FifteenthTile.Icon;
    FifteenthTile.Icon=Application::BackgroudGamingRoom;
    }



    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <1590,556,1800,596>
  slot SixteenthTileMovement
  {
    sender; /* the method is called from the sender object */

    $if (!$prototyper)
    native{pressKey();}
    $endif 

    if(FifteenthPos==0)
    {
    FifteenthPos=SixteenthPos;
    SixteenthPos=0;
    FifteenthTile.Icon=SixteenthTile.Icon;
    SixteenthTile.Icon=Application::BackgroudGamingRoom;
    }

    if(TwelfthPos==0)
    {
    TwelfthPos=SixteenthPos;
    SixteenthPos=0;
    TwelfthTile.Icon=SixteenthTile.Icon;
    SixteenthTile.Icon=Application::BackgroudGamingRoom;
    }

    var slot sl=this.FindSolution;
    signal sl;
  }

  $rect <920,676,1120,716>
  slot FindSolution
  {
    if(FirstPos==1 && SecondPos==2 && ThirdPos==3 && FourthPos==4 && FifthPos==5 && SixthPos==6 && SeventhPos==7 && EighthPos==8 && NinthPos==9 && TenthPos==10 && EleventhPos==11 && TwelfthPos==12 && ThirteenthPos==13 && FourteenthPos==14 && FifteenthPos==15 && SixteenthPos==0)
    {
    Guessed=true;
    RevealTilesTimer.Enabled=true;
    UpdateTimer.Enabled=false;
    }


  }

  note arrow Note
  {
    attr Point1 = <940,90>;
    attr Point2 = <960,-40>;
  }

  // Game logic
  note group GameLogic
  {
    attr Bounds = <880,-14,1850,736>;
  }

  // The positions are used to identify the placement of the images at any given \
  // time. They do not move, the images on them change.
  note legend PositionsLegend2
  {
    attr Bounds = <860,-250,1160,-50>;
  }

  // Tiles' movement
  note group TilesMovement1
  {
    attr Bounds = <900,356,1830,656>;
  }

  // Tiles' positions
  note group TilesPositions1
  {
    attr Bounds = <900,66,1830,346>;
  }

  // Effects
  note group Effects
  {
    attr Bounds = <1870,306,2570,776>;
  }

  $rect <1920,406,2150,446>
  slot RevealCompletedPicture
  {
    Solution.Visible=true;

    RevealGuessedTextTimer.Enabled=true;
    RevealFilterTimer.Enabled=true;

  }

  $rect <1920,456,2150,496>
  slot RevealAllTiles
  {
    if(Guessed==true)
    {
    SixteenthTile.Icon=Application::SixteenthTile;
    }
    RevealPictureTimer.Enabled=true;
  }

  // Reveal answer
  note group RevealAnswer
  {
    attr Bounds = <1910,366,2520,716>;
  }

  $rect <2200,406,2470,446>
  object Core::Timer RevealTilesTimer
  {
    preset OnTrigger = RevealAllTiles;
    preset Period = 0;
    preset Begin = 1000;
  }

  $rect <2200,456,2470,496>
  object Core::Timer RevealPictureTimer
  {
    preset OnTrigger = RevealCompletedPicture;
    preset Period = 0;
    preset Begin = 1500;
  }

  $rect <20,20,160,60>
  object Views::Image Solution
  {
    preset Bounds = <257,72,581,405>;
    preset Bitmap = Application::Medusa;
    preset Visible = false;
  }

  $rect <2201,506,2470,546>
  object Core::Timer RevealGuessedTextTimer
  {
    preset OnTrigger = RevealGuessedText;
    preset Period = 0;
    preset Begin = 1200;
  }

  $rect <1920,506,2150,546>
  slot RevealGuessedText
  {
    if(Guessed==true)
    GuessedText.Visible=true;
    else
    {
    LostText.Visible=true;
    }
    //RevealFilterTimer.Enabled=true;

  }

  $rect <20,20,160,60>
  object Views::FilterImage FilterKeyboard
  {
    preset Bounds = <250,75,581,409>;
    preset Bitmap = Application::BackgroudGamingRoom;
    preset TintColor = #180E00FF;
    preset TintIntensity = 5.0;
    preset TintMode = Graphics::TintMode.TintByOpacity;
    preset Opacity = 100;
    preset Visible = false;
  }

  $rect <2130,666,2330,706>
  object Effects::ColorEffect GuessedTextPulse
  {
    preset OnAnimate = FindSolution;
    preset Bounces = 6;
    preset TimingCustom2 = 0.0;
    preset TimingCustom1 = 0.0;
    preset Timing = Effects::Timing.Linear;
    preset NoOfCycles = 6;
    preset Enabled = false;
    preset Value2 = #D2851BFF;
    preset Value1 = #F3FF00FF;
    preset Outlet = ^GuessedText.Color;
  }

  $rect <2200,556,2470,596>
  object Core::Timer RevealFilterTimer
  {
    preset OnTrigger = RevealFilter;
    preset Period = 0;
    preset Begin = 200;
  }

  $rect <1920,556,2150,596>
  slot RevealFilter
  {
    FilterEffect.Enabled=true;
    FilterKeyboard.Visible=true;
    DisableEffectTimer.Enabled=true;



  }

  $rect <1920,666,2120,706>
  object Effects::ColorEffect FilterEffect
  {
    preset OnAnimate = RevealFilter;
    preset Bounces = 3;
    preset Oscillations = 1;
    preset Value2 = #000000FF;
    preset Value1 = #E8A0385D;
    preset Outlet = ^FilterKeyboard.TintColor;
  }

  $rect <1920,606,2150,646>
  slot DisableEffect
  {
    FilterEffect.Enabled=false;
  }

  $rect <2200,606,2470,646>
  object Core::Timer DisableEffectTimer
  {
    preset OnTrigger = DisableEffect;
    preset Begin = 1500;
  }

  $rect <1600,676,1800,716>
  slot OpenMenu
  {
    //BlackFilterBlackFilter.Visible=true;
    //Variable=Time;
    //GetRoot().PresentDialog( new Application::Menu,Effects::SlideDownCentered, null, null, null, null, null, null, null, false );
    GetRoot().PresentDialog( new Application::TilesPuzzleMenu,Effects::SlideDownCentered, null, null, null, null, null, null, null, false );

  }

  // This autoobject provides the default customization for the 'push button' widget \
  // (WidgetSet::PushButton) in its medium size variant.
  $rect <2180,726,2420,766>
  object WidgetSet::PushButtonConfig MenuButtonConfig
  {
    preset LabelColorActive = Application::LightOrange;
    preset LabelColorFocused = Application::LightOrange;
    preset LabelColorDisabled = Application::VibrantOrange;
    preset LabelColorDefault = Application::Black;
    preset IconTintActive = Application::LightOrange;
    preset IconTintFocused = Application::VibrantOrange;
    preset IconTintDisabled = Application::DarkOrange;
    preset IconTintDefault = Application::Black;
    preset LabelFont = Resources::FontLarge;
    preset WidgetMinSize = <34,34>;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton MenuButton
  {
    preset StackingPriority = 2;
    preset Bounds = <-39,-20,111,74>;
    preset OnPress = OpenMenu;
    preset Icon = Application::open_menu;
    preset Label = "";
    preset Appearance = MenuButtonConfig;
  }

  $rect <1600,756,1780,796>
  inherited method Init()
  {
     UpdateTimer.Enabled=true;
     LoseGameTimer.Enabled=true; 
     VerifyActivePlayingTimer.Enabled=true;
     
  }

  $rect <1610,16,1810,56>
  var bool Guessed = false;

  $rect <20,20,160,60>
  object Views::Text LostText
  {
    preset StackingPriority = 2;
    preset Bounds = <31,152,769,329>;
    preset Padding = 0;
    preset ColorBR = #D27129FF;
    preset ColorTR = #D27129FF;
    preset ColorTL = #070707FF;
    preset String = "You lost!";
    preset Font = Application::WordGuessingGameFontWin;
    preset Visible = false;
  }

  $rect <1180,676,1380,716>
  slot LostGame
  {
    sender; 
    RevealPictureTimer.Enabled=true;

    //var slot sl=this.RevealCompletedPicture;
    //signal sl;
  }

  $rect <1390,676,1590,716>
  object Core::Timer LoseGameTimer
  {
    preset OnTrigger = LostGame;
    preset Period = 0;
    preset Begin = 120000;
  }

  $rect <20,20,160,60>
  object Views::Text TimeLeft
  {
    preset Bounds = <702,0,802,53>;
    preset ColorBR = #B38121FF;
    preset ColorTR = #FFC20CFF;
    preset String = "120";
    preset Font = Application::WordGuessingGameFont;
  }

  $rect <2150,96,2350,136>
  slot UpdateTimerSlot
  {
    Time--;
     if(Time>=0) 
     {
    TimeLeft.String=string(Time);
    }
  }

  $rect <1940,96,2140,136>
  object Core::Timer UpdateTimer
  {
    preset OnTrigger = UpdateTimerSlot;
    preset Period = 1000;
    preset Begin = 1000;
  }

  $rect <2170,46,2370,86>
  var int32 Time = 120;

  $rect <1940,46,2140,86>
  var int32 Variable;

  $rect <1930,146,2130,186>
  object Core::Timer VerifyActivePlayingTimer
  {
    preset OnTrigger = VerifyActivePlaying;
    preset Period = 1;
    preset Begin = 1;
  }

  $rect <2160,146,2360,186>
  slot VerifyActivePlaying
  {
    if( this.IsActiveDialog( true )==false)
    {
    UpdateTimer.Enabled=false;
    LoseGameTimer.Enabled=false;
    ActiveDialogBool=false;
    }

    if(ActiveDialogBool==false&&this.IsActiveDialog( true )==true)
    {
    UpdateTimer.Enabled=true;
    LoseGameTimer.Enabled=true;
    ActiveDialogBool=true;
    }


  }

  $rect <2040,196,2240,236>
  var bool ActiveDialogBool = true;

  // Active playing
  note group ActivePlayingNote
  {
    attr Bounds = <1890,-4,2420,276>;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member UpdateLayout
  $member UpdateViewState
  $member Image
  $member FirstTile
  $member TransparentButton
  $member FourthTile
  $member ThirdTile
  $member SecondTile
  $member FifthTile
  $member NinthTile
  $member ThirteenthTile
  $member SixthTile
  $member SeventhTile
  $member EighthTile
  $member TenthTile
  $member EleventhTile
  $member TwelfthTile
  $member FourteenthTile
  $member FifteenthTile
  $member SixteenthTile
  $member FirstPos
  $member SecondPos
  $member FourthPos
  $member FifthPos
  $member SixthPos
  $member SeventhPos
  $member EighthPos
  $member NinthPos
  $member TenthPos
  $member EleventhPos
  $member TwelfthPos
  $member ThirteenthPos
  $member FourteenthPos
  $member FifteenthPos
  $member ThirdPos
  $member TilesPositions
  $member TilesMovement
  $member SixteenthPos
  $member GuessedText
  $member FirstTileMovement
  $member SecondTileMovement
  $member ThirdTileMovement
  $member FourthTileMovement
  $member FifthTileMovement
  $member SixthTileMovement
  $member SeventhTileMovement
  $member EighthTileMovement
  $member NinthTileMovement
  $member TenthTileMovement
  $member EleventhTileMovement
  $member TwelfthTileMovement
  $member ThirteenthTileMovement
  $member FourteenthTileMovement
  $member FifteenthTileMovement
  $member SixteenthTileMovement
  $member FindSolution
  $member Note
  $member GameLogic
  $member PositionsLegend2
  $member TilesMovement1
  $member TilesPositions1
  $member Effects
  $member RevealCompletedPicture
  $member RevealAllTiles
  $member RevealAnswer
  $member RevealTilesTimer
  $member RevealPictureTimer
  $member Solution
  $member RevealGuessedTextTimer
  $member RevealGuessedText
  $member FilterKeyboard
  $member GuessedTextPulse
  $member RevealFilterTimer
  $member RevealFilter
  $member FilterEffect
  $member DisableEffect
  $member DisableEffectTimer
  $member OpenMenu
  $member MenuButtonConfig
  $member MenuButton
  $member Guessed
  $member LostText
  $member LostGame
  $member LoseGameTimer
  $member TimeLeft
  $member UpdateTimerSlot
  $member UpdateTimer
  $member Time
  $member Variable
  $member VerifyActivePlayingTimer
  $member VerifyActivePlaying
  $member ActiveDialogBool
  $member ActivePlayingNote
}

// Images tiles puzzle
note group ImagesTilesPuzzle
{
  attr Bounds = <670,690,1370,1080>;
}

$rect <720,750,920,790>
$output false
resource Resources::Bitmap Frame
{
  attr bitmapfile FileName = .\frame_rectangle_picture.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <720,800,920,840>
$output false
resource Resources::Bitmap FirstTile
{
  attr bitmapfile FileName = .\first_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <720,850,920,890>
$output false
resource Resources::Bitmap SecondTile
{
  attr bitmapfile FileName = .\second_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <720,900,920,940>
$output false
resource Resources::Bitmap ThirthTile
{
  attr bitmapfile FileName = .\third_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <720,950,920,990>
$output false
resource Resources::Bitmap ForthTile
{
  attr bitmapfile FileName = .\forth_tile.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <720,1000,920,1040>
$output false
resource Resources::Bitmap FifthTile
{
  attr bitmapfile FileName = .\fifth_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1140,750,1340,790>
$output false
resource Resources::Bitmap TwelfthTile
{
  attr bitmapfile FileName = .\twelfth_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <930,750,1130,790>
$output false
resource Resources::Bitmap SixthTile
{
  attr bitmapfile FileName = .\sixth_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <930,800,1130,840>
$output false
resource Resources::Bitmap SeventhTile
{
  attr bitmapfile FileName = .\seventh_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <930,850,1130,890>
$output false
resource Resources::Bitmap EighthTile
{
  attr bitmapfile FileName = .\eighth_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <930,900,1130,940>
$output false
resource Resources::Bitmap NinthTile
{
  attr bitmapfile FileName = .\ninth_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <930,950,1130,990>
$output false
resource Resources::Bitmap TenthTile
{
  attr bitmapfile FileName = .\tenth_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <930,1000,1130,1040>
$output false
resource Resources::Bitmap EleventhTile
{
  attr bitmapfile FileName = .\eleventh_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1140,800,1340,840>
$output false
resource Resources::Bitmap ThirteenTile
{
  attr bitmapfile FileName = .\thirteenth_tile.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1140,850,1340,890>
$output false
resource Resources::Bitmap ForteenthTile
{
  attr bitmapfile FileName = .\forteenth_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1140,900,1340,940>
$output false
resource Resources::Bitmap FifteenthTile
{
  attr bitmapfile FileName = .\fifteenth_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1140,950,1340,990>
$output false
resource Resources::Bitmap SixteenthTile
{
  attr bitmapfile FileName = .\sixteenth_tile1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <335,1100,535,1140>
$output false
resource Resources::Bitmap Arrow
{
  attr bitmapfile FileName = .\arrow.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1140,1000,1340,1040>
$output false
resource Resources::Bitmap Medusa
{
  attr bitmapfile FileName = .\medusa1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// Menus
note group Menus
{
  attr Bounds = <510,-10,850,240>;
}

$rect <550,40,800,80>
$output false
class Menu : Core::Group
{
  $rect <30,1250,230,1290>
  inherited property Bounds = <0,0,800,627>;

  $rect <30,1410,230,1450>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <30,1370,230,1410>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <20,20,160,60>
  object Views::Image Frame
  {
    preset StackingPriority = 8;
    preset Bounds = <138,141,631,628>;
    preset Bitmap = Application::MenuFrame;
  }

  $rect <20,20,160,60>
  object Views::FilterImage BlackFilter
  {
    preset StackingPriority = 9;
    preset Bounds = <299,265,474,478>;
    preset Bitmap = Application::BackgroudGamingRoom;
    preset TintColor = Application::Black;
    preset TintIntensity = 5.0;
    preset TintMode = Graphics::TintMode.TintByOpacity;
    preset Opacity = 140;
    preset Visible = true;
  }

  $rect <1010,60,1210,100>
  slot CloseMenu
  {
    Owner.DismissDialog( FindCurrentDialog(), null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Views::FilterImage BlackFilterBackground
  {
    preset StackingPriority = 7;
    preset Bounds = <2,-28,803,657>;
    preset Bitmap = Application::BackgroudGamingRoom;
    preset TintColor = Application::Black;
    preset TintIntensity = 5.0;
    preset TintMode = Graphics::TintMode.TintByOpacity;
    preset Opacity = 100;
    preset Visible = true;
  }

  $rect <940,610,1060,650>
  inherited method Init()
  {
    ButtonsTimer.Enabled=true;

  }

  $rect <1090,549,1330,589>
  object WidgetSet::PushButtonConfig ButtonConfig
  {
    preset LabelColorActive = Application::VibrantOrange;
    preset LabelColorFocused = Application::Black;
    preset LabelColorDisabled = Application::Black;
    preset LabelColorDefault = Application::Black;
    preset IconTintActive = Application::VibrantOrange;
    preset IconTintFocused = Application::Black;
    preset IconTintDisabled = Application::Black;
    preset IconTintDefault = Application::Black;
    preset LabelFont = Application::WordGuessingGameSmallFont;
  }

  $rect <870,240,1080,280>
  object Core::Timer ButtonsTimer
  {
    preset OnTrigger = ShowButtons;
    preset Period = 0;
    preset Begin = 1000;
  }

  $rect <1130,240,1320,280>
  slot ShowButtons
  {
    FilterEffect.Enabled=true;
     
                    
    //Game.Visible=true; 
    //ExtraTime.Enabled=true;
    Rules.Visible=true;

    SecondPulseColorTimer.Enabled=true;


  }

  $rect <870,290,1080,330>
  object Core::Timer SecondPulseColorTimer
  {
    preset OnTrigger = SecondPulseColor;
    preset Period = 0;
    preset Begin = 1000;
  }

  $rect <1130,490,1320,530>
  slot StopPulseColor
  {
    FilterEffect.Outlet=null;
  }

  $rect <1130,343,1320,383>
  slot ThirdPulseColor
  {
     Game.Visible=true;
    ForthPulseColorTimer.Enabled=true;
  }

  $rect <870,490,1080,530>
  object Core::Timer StopPulseColorTimer
  {
    preset OnTrigger = StopPulseColor;
    preset Period = 0;
    preset Begin = 1000;
  }

  $rect <850,550,1050,590>
  object Effects::ColorEffect FilterEffect
  {
    preset OnAnimate = null;
    preset Bounces = 5;
    preset Oscillations = 1;
    preset Timing = Effects::Timing.Circle_Out;
    preset Value2 = #000000FF;
    preset Value1 = Application::VibrantOrange;
    preset Outlet = ^BlackFilter.TintColor;
  }

  $rect <870,345,1080,385>
  object Core::Timer ThirdPulseColorTimer
  {
    preset OnTrigger = ThirdPulseColor;
    preset Period = 0;
    preset Begin = 1000;
  }

  $rect <1130,290,1320,330>
  slot SecondPulseColor
  {
    //GameRoom.Visible=true;
    Music.Visible=true;
     
    ThirdPulseColorTimer.Enabled=true;
  }

  $rect <1010,10,1210,50>
  slot BackToGameSlot
  {
    //if ( IsDialog(false))
      //{
     // Owner.DismissDialog( this, null, null, null, null, null, false ); 
      //Owner.DismissDialog( Application::Menu, null, null, null, null, null, false );


    //  Owner.DismissDialog( this, null, null, null, null, null, false );
            var slot sl=this.CloseMenu;
          signal sl;    
        Owner.DismissDialog( FindCurrentDialog(), null, null, null, null, null, false );


  }

  $rect <1010,110,1210,150>
  slot BackToGameRoom
  {
     Owner.DismissDialog( this.FindCurrentDialog(), null, null, null, null, null, false ); 
    //  Owner.DismissDialog( Application::Menu, null, null, null, null, null, false );
    //  }
    //GetRoot().DismissDialog( this, null, null, null, null, null, false );
    GetRoot().SwitchToDialog(new Application::GameRoom, null, null, null, null, null, null, null, null, null, false );
     //trace this.FindCurrentDialog();

  }

  $rect <1070,610,1210,650>
  slot MusicSLot
  {
    $if (!$prototyper)
    native{isAudioPlaying();}
    $endif 
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Game
  {
    preset StackingPriority = 8;
    preset Bounds = <310,379,452,411>;
    preset Visible = false;
    preset OnPress = BackToGameSlot;
    preset Label = "Back to the game";
    preset Appearance = ButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton GameRoom
  {
    preset StackingPriority = 9;
    preset Bounds = <309,411,451,465>;
    preset Visible = false;
    preset OnPress = BackToGameRoom;
    preset Label = "Back to the game room";
    preset Appearance = ButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Music
  {
    preset StackingPriority = 9;
    preset Bounds = <310,323,452,361>;
    preset Visible = false;
    preset OnPress = MusicSLot;
    preset Label = "Play/Pause Music";
    preset Appearance = ButtonConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Rules
  {
    preset StackingPriority = 9;
    preset Bounds = <341,291,423,330>;
    preset Visible = false;
    preset OnPress = BackToGameRoom;
    preset Label = "Rules";
    preset Appearance = ButtonConfig;
  }

  $rect <870,390,1080,430>
  object Core::Timer ForthPulseColorTimer
  {
    preset OnTrigger = ForthPulseColor;
    preset Period = 0;
    preset Begin = 1000;
  }

  $rect <1120,391,1320,431>
  slot ForthPulseColor
  {
    GameRoom.Visible=true;

    FifthPulseColorTimer.Enabled=true;
  }

  // Functionality buttons
  note group FunctionalityButtonsNote
  {
    attr Bounds = <960,-40,1260,180>;
  }

  // Effetcs
  note group EffetcsNote
  {
    attr Bounds = <840,200,1350,660>;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Restart
  {
    preset StackingPriority = 9;
    preset Bounds = <339,353,421,392>;
    preset Visible = true;
    preset OnPress = BackToGameRoom;
    preset Label = "Restart";
    preset Appearance = ButtonConfig;
  }

  $rect <870,440,1080,480>
  object Core::Timer FifthPulseColorTimer
  {
    preset OnTrigger = FifthPulseColor;
    preset Period = 0;
    preset Begin = 1000;
  }

  $rect <1120,440,1320,480>
  slot FifthPulseColor
  {
    Restart.Visible=true;

    StopPulseColorTimer.Enabled=true;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member UpdateLayout
  $member UpdateViewState
  $member Frame
  $member BlackFilter
  $member CloseMenu
  $member BlackFilterBackground
  $member ButtonConfig
  $member ButtonsTimer
  $member ShowButtons
  $member SecondPulseColorTimer
  $member StopPulseColor
  $member ThirdPulseColor
  $member StopPulseColorTimer
  $member FilterEffect
  $member ThirdPulseColorTimer
  $member SecondPulseColor
  $member BackToGameSlot
  $member BackToGameRoom
  $member MusicSLot
  $member Game
  $member GameRoom
  $member Music
  $member Rules
  $member ForthPulseColorTimer
  $member ForthPulseColor
  $member FunctionalityButtonsNote
  $member EffetcsNote
  $member Restart
  $member FifthPulseColorTimer
  $member FifthPulseColor
}

$rect <570,90,800,130>
$output false
class GuessTheWordMenu : Application::Menu
{
  $rect <-10,2420,190,2460>
  inherited property Bounds = <0,0,800,486>;

  $rect <-10,2580,190,2620>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <-10,2540,190,2580>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <850,50,1030,90>
  inherited method Init()
  {
    Rules.OnPress=OpenRulePage;
    Restart.OnPress=OpenGuessingGame;

  }

  $rect <20,20,160,60>
  inherited object Frame
  {
    preset Bounds = <154,-1,647,486>;
  }

  $rect <20,20,160,60>
  inherited object BlackFilter
  {
    preset Bounds = <311,136,486,349>;
  }

  $rect <20,20,160,60>
  inherited object BlackFilterBackground
  {
    preset Bounds = <-2,-1,799,486>;
  }

  $rect <200,-250,400,-210>
  var int32 Variable = 0;

  $rect <20,20,160,60>
  inherited object Game
  {
    preset StackingPriority = 12;
    preset Bounds = <327,214,469,246>;
  }

  $rect <20,20,160,60>
  inherited object GameRoom
  {
    preset StackingPriority = 11;
    preset Bounds = <328,246,470,300>;
  }

  $rect <20,20,160,60>
  inherited object Music
  {
    preset Bounds = <327,176,469,214>;
  }

  $rect <20,20,160,60>
  inherited object Rules
  {
    preset Bounds = <353,151,435,179>;
  }

  $rect <830,100,1030,140>
  slot OpenRulePage
  {
    GetRoot().PresentDialog( new Application::GuessingGameRules,Effects::SlideDownCentered, null, null, null, null, null, null, null, false );

  }

  $rect <20,20,160,60>
  inherited object Restart
  {
    preset Bounds = <358,299,440,327>;
    preset Visible = false;
    preset OnPress = OpenGuessingGame;
  }

  $rect <830,150,1030,190>
  slot OpenGuessingGame
  {
    Owner.DismissDialog( FindCurrentDialog(), null, null, null, null, null, false );

    Owner.DismissDialog( this.FindDialogByClass( Application::GuessTheWord), null, null, null, null, null, false );

    GetRoot().PresentDialog( new Application::GuessTheWord,null, null, null, null, null, null, null, null, false );



  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member UpdateLayout
  $member UpdateViewState
  $member Game
  $member GameRoom
  $member Frame
  $member BlackFilter
  $member Music
  $member BlackFilterBackground
  $member Variable
  $member Rules
  $member Restart
  $member OpenRulePage
  $member OpenGuessingGame

  // Directives to adapt the order of members belonging to this class so they appear 
  // correctly arranged relative to the members inherited from the ancestor (super) 
  // classes. The numbers indicate the order-displacement to apply on the respective 
  // member once all members have been loaded and combined with members from the 
  // ancestor classes.
  $reorder BackToGameSlot 18
  $reorder Game 20
  $reorder GameRoom 20
  $reorder BackToGameRoom 18
  $reorder Music 12
  $reorder MusicSLot 11
  $reorder Variable 12
}

$rect <1260,370,1460,410>
$output false
resource Resources::Bitmap MenuFrame
{
  attr bitmapfile FileName = .\menu_frame.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1260,420,1460,460>
$output false
resource Resources::Bitmap MenuBackground
{
  attr bitmapfile FileName = .\menu_background.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <30,1240,240,1280>
$output false
const color DarkOrange = #C67528FF;

// Colors
note group Colors
{
  attr Bounds = <0,1200,710,1350>;
}

$rect <30,1290,240,1330>
$output false
const color VibrantOrange = #F3A52BFF;

$rect <260,1290,470,1330>
$output false
const color LightOrange = #FFD10DFF;

$rect <260,1240,470,1280>
$output false
const color Black = #000000FF;

$rect <1260,470,1460,510>
$output false
resource Resources::Bitmap open_menu
{
  attr bitmapfile FileName = .\open_icon.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Alpha8;
  attr bitmapmode Mode = Default;
}

// Menu images
note group MenuImages
{
  attr Bounds = <1210,320,1510,600>;
}

$rect <1260,520,1460,560>
$output false
resource Resources::Bitmap close_icon
{
  attr bitmapfile FileName = .\close_icon.png;
  attr bitmapdithering Dithering = Auto;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapformat Format = Native;
  attr bitmapmode Mode = Default;
}

$rect <1260,180,1500,220>
$output false
resource Resources::Font WordGuessingGameSmallFont
{
  attr fontname FontName = Constantia;
  attr fontheight Height = 17;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <480,1240,690,1280>
$output false
const color SandColor = #CCC0AFFF;

$rect <40,150,240,190>
$output false
class GameRoom : Core::Group
{
  $rect <1510,-10,1710,30>
  inherited property Bounds = <0,0,800,480>;

  $rect <1510,90,1710,130>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <1510,40,1710,80>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <1230,330,1410,370>
  inherited method Init()
  {
  }

  $rect <1210,380,1450,420>
  object WidgetSet::PushButtonConfig TransparentButton;

  $rect <890,40,1120,80>
  slot OpenGuessingWordGame
  {
    //if ( IsDialog(false))
     //Owner.DismissDialog( this, null, null, null, null, null, false );
    //                     trace "Actual dialog1g", Owner;
    if ( IsActiveDialog( true ))
    {

      //GetRoot().PresentDialog( new Application::GuessTheWord,Effects::SlideLeftCentered, Effects::FadeInOutCentered, null, null, null, null, null, null, false );
      //    GetRoot().PresentDialog( new Application::GuessTheWord,null, null, null, null, null, null, null, null, false );
      GetRoot().SwitchToDialog( new Application::GuessTheWord,Effects::SlideLeftCentered, Effects::FadeInOutCentered, null, null, null, null, null, null, null, false );
    //      trace "Actual dialog2g", Owner;
    }

    var slot sl=this.DisableButtons;
    signal sl;

  }

  // Starting games
  note group StartingGames
  {
    attr Bounds = <850,-10,1150,200>;
  }

  // Effects handling
  note group Effects
  {
    attr Bounds = <850,230,1150,430>;
  }

  $rect <1230,60,1430,100>
  object Core::Timer TimerGuessingGame
  {
    preset OnTrigger = OpenGuessingWordGame;
    preset Period = 0;
    preset Begin = 1300;
  }

  $rect <880,280,1130,320>
  slot OnPressGuessingWordGame
  {
    WordGuessingButton.Icon=Application::OnPressWordGuessingLogo;


    TimerGuessingGame.Enabled=true;


  }

  $rect <890,90,1120,130>
  slot OpenMemoryGame
  {
    //if ( IsDialog(false))
     // Owner.DismissDialog( this, null, null, null, null, null, false );
    //  trace "Actual dialog1m", Owner;

    if ( IsActiveDialog( true ))
    {

    //  GetRoot().PresentDialog( new Application::MemoryGame,Effects::SlideLeftCentered, Effects::FadeInOutCentered, null, null, null, null, null, null, false );
      //    GetRoot().PresentDialog( new Application::GuessTheWord,null, null, null, null, null, null, null, null, false );
       GetRoot().SwitchToDialog( new Application::MemoryGame,Effects::SlideLeftCentered, Effects::FadeInOutCentered, null, null, null, null, null, null, null, false );
    //                       trace "Actual dialog2m", Owner;
    }

    var slot sl=this.DisableButtons;
    signal sl;


  }

  $rect <880,330,1130,370>
  slot OnPressMemoryGame
  {
    MemoryGameButton.Icon=Application::OnPressMemoryGameLogo;


    TimerMemoryGame.Enabled=true;


  }

  $rect <1230,110,1430,150>
  object Core::Timer TimerMemoryGame
  {
    preset OnTrigger = OpenMemoryGame;
    preset Period = 0;
    preset Begin = 1300;
  }

  $rect <1230,230,1430,270>
  slot DisableButtons
  {
    WordGuessingButton.Enabled=false;
    WordGuessingButton.Visible=false;
    MemoryGameButton.Enabled=false;
    MemoryGameButton.Visible=false;
    TilesPuzzleGameButton.Enabled=false;
    TilesPuzzleGameButton.Visible=false;
    Arrow.Enabled=false;
    Arrow.Visible=false;
    Sound.Enabled=false;
    Sound.Visible=false;

  }

  $rect <1230,160,1430,200>
  object Core::Timer TimeTilesPuzzleGame
  {
    preset OnTrigger = OpenTilesPuzzleGame;
    preset Period = 0;
    preset Begin = 1300;
  }

  $rect <890,140,1120,180>
  slot OpenTilesPuzzleGame
  {
    //if ( IsDialog(false))
     // Owner.DismissDialog( this, null, null, null, null, null, false );
    //      trace "Actual dialog1t", Owner;
    if ( IsActiveDialog( true ))
    {

    //  GetRoot().PresentDialog( new Application::TilesPuzzle,Effects::SlideLeftCentered, Effects::FadeInOutCentered, null, null, null, null, null, null, false );
      //    GetRoot().PresentDialog( new Application::GuessTheWord,null, null, null, null, null, null, null, null, false );
       GetRoot().SwitchToDialog( new Application::TilesPuzzle,Effects::SlideLeftCentered, Effects::FadeInOutCentered, null, null, null, null, null, null,null, false );
    //  trace "Actual dialog2t", Owner;
    }

    var slot sl=this.DisableButtons;
    signal sl;


  }

  $rect <880,380,1130,420>
  slot OnPressTilesPuzzleGame
  {
    TilesPuzzleGameButton.Icon=Application::OnPressTilesPuzzleLogo;


    TimeTilesPuzzleGame.Enabled=true;


  }

  $rect <20,20,160,60>
  object Views::Image Image
  {
    preset Bounds = <0,0,800,480>;
    preset Bitmap = Application::BackgroudGamingRoom;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton WordGuessingButton
  {
    preset Bounds = <157,172,289,305>;
    preset OnLeave = null;
    preset OnEnter = null;
    preset OnRelease = null;
    preset OnPress = OnPressGuessingWordGame;
    preset OnActivate = null;
    preset IconFrameActive = 2;
    preset IconFrameFocused = -1;
    preset IconFrameDisabled = -1;
    preset IconFrameDefault = -1;
    preset Icon = Application::WordGuessingLogo;
    preset Label = "";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton MemoryGameButton
  {
    preset Bounds = <324,169,456,302>;
    preset OnLeave = null;
    preset OnEnter = null;
    preset OnRelease = null;
    preset OnPress = OnPressMemoryGame;
    preset OnActivate = null;
    preset IconFrameActive = 2;
    preset IconFrameFocused = -1;
    preset IconFrameDisabled = -1;
    preset IconFrameDefault = -1;
    preset Icon = Application::MemoryGameLogo;
    preset Label = "";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton TilesPuzzleGameButton
  {
    preset Bounds = <486,169,633,302>;
    preset OnLeave = null;
    preset OnEnter = null;
    preset OnRelease = null;
    preset OnPress = OnPressTilesPuzzleGame;
    preset OnActivate = null;
    preset IconFrameActive = 2;
    preset IconFrameFocused = -1;
    preset IconFrameDisabled = -1;
    preset IconFrameDefault = -1;
    preset Icon = Application::TilesPuzzleLogo;
    preset Label = "";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Arrow
  {
    preset Bounds = <636,523,730,574>;
    preset Icon = Application::Arrow;
    preset Label = "Caption";
    preset Appearance = TransparentButton;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Sound
  {
    preset Bounds = <46,47,120,115>;
    preset OnPress = MusicSLot;
    preset Icon = Application::sound_on;
    preset Label = "Caption";
    preset Appearance = TransparentButton;
  }

  $rect <1230,280,1430,320>
  slot MusicSLot
  {
    $if (!$prototyper)
    native{isAudioPlaying();}
    $endif 
  }

  // Effects
  note group EffectsNote
  {
    attr Bounds = <1160,-10,1510,430>;
  }

  // Timers for the effects
  note group Timers1
  {
    attr Bounds = <1180,20,1480,220>;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member UpdateLayout
  $member UpdateViewState
  $member TransparentButton
  $member OpenGuessingWordGame
  $member StartingGames
  $member Effects
  $member TimerGuessingGame
  $member OnPressGuessingWordGame
  $member OpenMemoryGame
  $member OnPressMemoryGame
  $member TimerMemoryGame
  $member DisableButtons
  $member TimeTilesPuzzleGame
  $member OpenTilesPuzzleGame
  $member OnPressTilesPuzzleGame
  $member Image
  $member WordGuessingButton
  $member MemoryGameButton
  $member TilesPuzzleGameButton
  $member Arrow
  $member Sound
  $member MusicSLot
  $member EffectsNote
  $member Timers1
}

$rect <550,1100,750,1140>
$output false
resource Resources::Bitmap sound_on
{
  attr bitmapfile FileName = .\sound_on.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <770,1100,970,1140>
$output false
resource Resources::Bitmap sound_off
{
  attr bitmapfile FileName = .\sound_off.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// Digits
note group DigitsNote
{
  attr Bounds = <1390,650,1580,1120>;
}

$rect <1430,700,1530,740>
$output false
resource Resources::Bitmap Digit0
{
  attr bitmapfile FileName = .\0.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1430,740,1530,780>
$output false
resource Resources::Bitmap Digit1
{
  attr bitmapfile FileName = .\1.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1430,780,1530,820>
$output false
resource Resources::Bitmap Digit2
{
  attr bitmapfile FileName = .\2.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1430,820,1530,860>
$output false
resource Resources::Bitmap Digit3
{
  attr bitmapfile FileName = .\3.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1430,860,1530,900>
$output false
resource Resources::Bitmap Digit4
{
  attr bitmapfile FileName = .\4.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1430,900,1530,940>
$output false
resource Resources::Bitmap Digit5
{
  attr bitmapfile FileName = .\5.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1430,940,1530,980>
$output false
resource Resources::Bitmap Digit6
{
  attr bitmapfile FileName = .\6.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1430,980,1530,1020>
$output false
resource Resources::Bitmap Digit7
{
  attr bitmapfile FileName = .\7.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1430,1020,1530,1060>
$output false
resource Resources::Bitmap Digit8
{
  attr bitmapfile FileName = .\8.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <1430,1060,1530,1100>
$output false
resource Resources::Bitmap Digit9
{
  attr bitmapfile FileName = .\9.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// Rules
note group RulesNote
{
  attr Bounds = <870,-10,1190,240>;
}

$rect <900,40,1150,80>
$output false
class Rules : Core::Group
{
  $rect <850,70,1050,110>
  inherited property Bounds = <0,0,800,480>;

  $rect <10,880,210,920>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <10,840,210,880>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <20,20,160,60>
  object Views::Image r
  {
    preset StackingPriority = 1;
    preset Bounds = <267,37,317,87>;
    preset Bitmap = Application::r;
  }

  $rect <20,20,160,60>
  object Views::Image u
  {
    preset StackingPriority = 1;
    preset Bounds = <319,40,369,90>;
    preset Bitmap = Application::u;
  }

  $rect <20,20,160,60>
  object Views::Image l
  {
    preset StackingPriority = 1;
    preset Bounds = <366,40,416,90>;
    preset Bitmap = Application::l;
  }

  $rect <20,20,160,60>
  object Views::Image e
  {
    preset StackingPriority = 1;
    preset Bounds = <416,42,466,92>;
    preset Bitmap = Application::e;
  }

  $rect <20,20,160,60>
  object Views::Image s
  {
    preset StackingPriority = 1;
    preset Bounds = <466,42,516,92>;
    preset Bitmap = Application::s;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Button
  {
    preset StackingPriority = 2;
    preset Bounds = <324,360,459,466>;
    preset OnPress = null;
    preset Icon = Application::Button;
    preset Label = "Exit";
    preset Appearance = PushButtonConfig;
  }

  $rect <840,20,1080,60>
  object WidgetSet::PushButtonConfig PushButtonConfig;

  $rect <20,20,160,60>
  object Views::Image Background
  {
    preset Bounds = <0,0,800,480>;
    preset Bitmap = Application::BackgroudGamingRoom;
  }
}

$rect <920,90,1150,130>
$output false
class GuessingGameRules : Application::Rules
{
  $rect <860,230,1060,270>
  inherited property Bounds = <0,0,800,480>;

  $rect <860,390,1060,430>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <860,350,1060,390>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <20,20,160,60>
  inherited object r
  {
    preset Bounds = <271,32,321,82>;
  }

  $rect <20,20,160,60>
  inherited object u
  {
    preset Bounds = <323,35,373,85>;
  }

  $rect <20,20,160,60>
  inherited object l
  {
    preset Bounds = <370,35,420,85>;
  }

  $rect <20,20,160,60>
  inherited object e
  {
    preset StackingPriority = 3;
    preset Bounds = <420,40,470,90>;
  }

  $rect <20,20,160,60>
  inherited object s
  {
    preset Bounds = <470,37,520,87>;
  }

  $rect <20,20,160,60>
  object Views::Text FirstRule
  {
    preset StackingPriority = 1;
    preset Bounds = <245,93,538,197>;
    preset ColorTR = #FFE734FF;
    preset ColorTL = #FFFFFFFF;
    preset String = "You start by guessing any four letters. ";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <20,20,160,60>
  object Views::Text SecondRulePartOne
  {
    preset StackingPriority = 1;
    preset Layout = Core::Layout[AlignToLeft, AlignToRight, AlignToTop];
    preset Bounds = <2,145,786,234>;
    preset Orientation = Views::Orientation.Normal;
    preset ColorTR = #FFE734FF;
    preset String = "If you guess any of the word`s letters and their positions, ";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <20,20,160,60>
  object Views::Text ThirdRule
  {
    preset StackingPriority = 1;
    preset Bounds = <70,250,747,278>;
    preset ColorTR = #FFE734FF;
    preset String = "If you guess a letter, but not its placement it will appear at the bottom of the screen. ";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <20,20,160,60>
  object Views::Text ForthRule
  {
    preset StackingPriority = 1;
    preset Bounds = <129,286,672,330>;
    preset ColorTR = #FFE734FF;
    preset String = "You have a limited number of tries to guess the word before you lose.";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <20,20,160,60>
  object Views::Text SecondRulePartTwo
  {
    preset StackingPriority = 1;
    preset Bounds = <172,205,629,235>;
    preset ColorTR = #FFE734FF;
    preset String = "you will see the letter or letters revealed in black.";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <870,0,1050,40>
  inherited method Init()
  {
    Button.OnPress=BackToMenuSlot;
  }

  $rect <20,20,160,60>
  inherited object Button
  {
    preset StackingPriority = 2;
  }

  $rect <20,20,160,60>
  object Views::Text BackToMenu
  {
    preset StackingPriority = 1;
    preset Bounds = <163,330,620,360>;
    preset ColorTR = #FFE734FF;
    preset String = "The button bellow will bring you back to the menu";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <860,100,1060,140>
  slot BackToMenuSlot
  {
    Button.Visible=false;
    Owner.DismissDialog( FindCurrentDialog(), null, null, null, null, null, false );
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member UpdateLayout
  $member UpdateViewState
  $member r
  $member u
  $member l
  $member e
  $member s
  $member Button
  $member FirstRule
  $member SecondRulePartOne
  $member ThirdRule
  $member ForthRule
  $member SecondRulePartTwo
  $member BackToMenu
  $member BackToMenuSlot
}

$rect <990,1100,1190,1140>
$output false
resource Resources::Bitmap Button
{
  attr bitmapfile FileName = .\button.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <570,140,800,180>
$output false
class MemoryGameMenu : Application::Menu
{
  $rect <-10,2420,190,2460>
  inherited property Bounds = <0,0,800,486>;

  $rect <-10,2580,190,2620>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <-10,2540,190,2580>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <850,30,1030,70>
  inherited method Init()
  {
    Rules.OnPress=OpenRulePage;
    Restart.OnPress=OpenMemoryGame;

  }

  $rect <20,20,160,60>
  inherited object Frame
  {
    preset Bounds = <154,-1,647,486>;
  }

  $rect <20,20,160,60>
  inherited object BlackFilter
  {
    preset Bounds = <311,136,486,349>;
  }

  $rect <20,20,160,60>
  inherited object BlackFilterBackground
  {
    preset Bounds = <-2,-1,799,486>;
  }

  $rect <20,20,160,60>
  inherited object Game
  {
    preset StackingPriority = 12;
    preset Bounds = <327,229,469,261>;
  }

  $rect <20,20,160,60>
  inherited object GameRoom
  {
    preset StackingPriority = 11;
    preset Bounds = <328,261,470,315>;
  }

  $rect <20,20,160,60>
  inherited object Music
  {
    preset Bounds = <327,191,469,229>;
  }

  $rect <20,20,160,60>
  inherited object Rules
  {
    preset Bounds = <353,157,435,196>;
  }

  $rect <830,80,1030,120>
  slot OpenRulePage
  {
    GetRoot().PresentDialog( new Application::MemoryGameRules,Effects::SlideDownCentered, null, null, null, null, null, null, null, false );

  }

  $rect <20,20,160,60>
  inherited object Restart
  {
    preset Bounds = <353,302,435,341>;
    preset Visible = false;
  }

  $rect <830,130,1030,170>
  slot OpenMemoryGame
  {
    Owner.DismissDialog( FindCurrentDialog(), null, null, null, null, null, false );

    Owner.DismissDialog( this.FindDialogByClass( Application::MemoryGame), null, null, null, null, null, false );

    GetRoot().PresentDialog( new Application::MemoryGame,null, null, null, null, null, null, null, null, false );



  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member UpdateLayout
  $member UpdateViewState
  $member Game
  $member GameRoom
  $member Frame
  $member BlackFilter
  $member Music
  $member BlackFilterBackground
  $member Rules
  $member Restart
  $member OpenRulePage
  $member OpenMemoryGame

  // Directives to adapt the order of members belonging to this class so they appear 
  // correctly arranged relative to the members inherited from the ancestor (super) 
  // classes. The numbers indicate the order-displacement to apply on the respective 
  // member once all members have been loaded and combined with members from the 
  // ancestor classes.
  $reorder BackToGameSlot 18
  $reorder Game 20
  $reorder GameRoom 20
  $reorder BackToGameRoom 18
  $reorder Music 12
  $reorder MusicSLot 11
}

$rect <920,140,1150,180>
$output false
class MemoryGameRules : Application::Rules
{
  $rect <860,240,1060,280>
  inherited property Bounds = <0,0,800,480>;

  $rect <860,400,1060,440>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <860,360,1060,400>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <20,20,160,60>
  inherited object r
  {
    preset Bounds = <271,32,321,82>;
  }

  $rect <20,20,160,60>
  inherited object u
  {
    preset Bounds = <323,35,373,85>;
  }

  $rect <20,20,160,60>
  inherited object l
  {
    preset Bounds = <370,35,420,85>;
  }

  $rect <20,20,160,60>
  inherited object e
  {
    preset StackingPriority = 3;
    preset Bounds = <420,40,470,90>;
  }

  $rect <20,20,160,60>
  inherited object s
  {
    preset Bounds = <470,37,520,87>;
  }

  $rect <20,20,160,60>
  object Views::Text FirstRule
  {
    preset StackingPriority = 1;
    preset Bounds = <180,149,611,186>;
    preset ColorTR = #FFE734FF;
    preset ColorTL = #FFFFFFFF;
    preset String = "The goal is to find all the matching pairs of cards.";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <20,20,160,60>
  object Views::Text SecondRulePartOne
  {
    preset StackingPriority = 1;
    preset Layout = Core::Layout[AlignToLeft, AlignToRight, AlignToTop];
    preset Bounds = <-1,205,783,248>;
    preset Orientation = Views::Orientation.Normal;
    preset ColorTR = #FFE734FF;
    preset String = "If you find two matching cards, they will remain visible. ";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <20,20,160,60>
  object Views::Text ForthRule
  {
    preset StackingPriority = 1;
    preset Bounds = <129,257,672,301>;
    preset ColorTR = #FFE734FF;
    preset String = "To win, you have to find all the matching cards within one minute.";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <870,10,1050,50>
  inherited method Init()
  {
    Button.OnPress=BackToMenuSlot;
  }

  $rect <20,20,160,60>
  inherited object Button
  {
    preset StackingPriority = 2;
  }

  $rect <20,20,160,60>
  object Views::Text BackToMenu
  {
    preset StackingPriority = 1;
    preset Bounds = <163,315,620,345>;
    preset ColorTR = #FFE734FF;
    preset String = "The button bellow will bring you back to the menu";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <860,110,1060,150>
  slot BackToMenuSlot
  {
    Button.Visible=false;
    Owner.DismissDialog( FindCurrentDialog(), null, null, null, null, null, false );
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member UpdateLayout
  $member UpdateViewState
  $member r
  $member u
  $member l
  $member e
  $member s
  $member Button
  $member FirstRule
  $member SecondRulePartOne
  $member ForthRule
  $member BackToMenu
  $member BackToMenuSlot
}

$rect <570,190,800,230>
$output false
class TilesPuzzleMenu : Application::Menu
{
  $rect <-10,2420,190,2460>
  inherited property Bounds = <0,0,800,486>;

  $rect <-10,2580,190,2620>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <-10,2540,190,2580>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <840,40,1020,80>
  inherited method Init()
  {
    Rules.OnPress=OpenRulePage;
    Restart.OnPress=OpenTilePuzzleGame;

  }

  $rect <20,20,160,60>
  inherited object Frame
  {
    preset Bounds = <154,-1,647,486>;
  }

  $rect <20,20,160,60>
  inherited object BlackFilter
  {
    preset Bounds = <311,136,486,349>;
  }

  $rect <20,20,160,60>
  inherited object BlackFilterBackground
  {
    preset Bounds = <-2,-1,799,486>;
  }

  $rect <-800,40,-600,80>
  var int32 Variable = 0;

  $rect <20,20,160,60>
  inherited object Game
  {
    preset StackingPriority = 12;
    preset Bounds = <327,229,469,261>;
  }

  $rect <20,20,160,60>
  inherited object GameRoom
  {
    preset StackingPriority = 11;
    preset Bounds = <328,261,470,315>;
  }

  $rect <20,20,160,60>
  inherited object Music
  {
    preset Bounds = <327,191,469,229>;
  }

  $rect <20,20,160,60>
  inherited object Rules
  {
    preset Bounds = <353,157,435,196>;
  }

  $rect <820,90,1020,130>
  slot OpenRulePage
  {
    GetRoot().PresentDialog( new Application::TilesPuzzleRules,Effects::SlideDownCentered, null, null, null, null, null, null, null, false );

  }

  $rect <20,20,160,60>
  inherited object Restart
  {
    preset Bounds = <357,310,439,349>;
    preset Visible = false;
  }

  $rect <820,140,1020,180>
  slot OpenTilePuzzleGame
  {
    Owner.DismissDialog( FindCurrentDialog(), null, null, null, null, null, false );

    Owner.DismissDialog( this.FindDialogByClass( Application::TilesPuzzle), null, null, null, null, null, false );

    GetRoot().PresentDialog( new Application::TilesPuzzle,null, null, null, null, null, null, null, null, false );



  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member UpdateLayout
  $member UpdateViewState
  $member Game
  $member GameRoom
  $member Frame
  $member BlackFilter
  $member Music
  $member BlackFilterBackground
  $member Variable
  $member Rules
  $member Restart
  $member OpenRulePage
  $member OpenTilePuzzleGame

  // Directives to adapt the order of members belonging to this class so they appear 
  // correctly arranged relative to the members inherited from the ancestor (super) 
  // classes. The numbers indicate the order-displacement to apply on the respective 
  // member once all members have been loaded and combined with members from the 
  // ancestor classes.
  $reorder BackToGameSlot 18
  $reorder Game 20
  $reorder GameRoom 20
  $reorder BackToGameRoom 18
  $reorder Music 12
  $reorder MusicSLot 11
  $reorder Variable 12
}

$rect <920,190,1150,230>
$output false
class TilesPuzzleRules : Application::Rules
{
  $rect <850,240,1050,280>
  inherited property Bounds = <0,0,800,480>;

  $rect <850,400,1050,440>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <850,360,1050,400>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <20,20,160,60>
  inherited object r
  {
    preset Bounds = <271,22,321,72>;
  }

  $rect <20,20,160,60>
  inherited object u
  {
    preset Bounds = <323,25,373,75>;
  }

  $rect <20,20,160,60>
  inherited object l
  {
    preset Bounds = <370,25,420,75>;
  }

  $rect <20,20,160,60>
  inherited object e
  {
    preset StackingPriority = 3;
    preset Bounds = <420,30,470,80>;
  }

  $rect <20,20,160,60>
  inherited object s
  {
    preset Bounds = <470,27,520,77>;
  }

  $rect <20,20,160,60>
  object Views::Text FirstRule
  {
    preset StackingPriority = 1;
    preset Bounds = <162,79,628,131>;
    preset ColorTR = #FFE734FF;
    preset ColorTL = #FFFFFFFF;
    preset String = "The goal is to rearrange the tiles to form a completed picture.";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <20,20,160,60>
  object Views::Text SecondRuleParOne
  {
    preset StackingPriority = 1;
    preset Layout = Core::Layout[AlignToLeft, AlignToRight, AlignToTop];
    preset Bounds = <-1,134,783,178>;
    preset Orientation = Views::Orientation.Normal;
    preset ColorTR = #FFE734FF;
    preset String = "empty to allow movement. ";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <20,20,160,60>
  object Views::Text ForthRule
  {
    preset StackingPriority = 1;
    preset Bounds = <63,199,740,227>;
    preset ColorTR = #FFE734FF;
    preset String = "Tiles slide horizontally or vertically into the empty space; diagonal moves are not allowed.";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <20,20,160,60>
  object Views::Text FifthRulePartOne
  {
    preset StackingPriority = 1;
    preset Bounds = <0,227,798,271>;
    preset ColorTR = #FFE734FF;
    preset String = "To win, you must arrange the tiles in the correct sequence or complete the picture  ";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <20,20,160,60>
  object Views::Text ThirdRule
  {
    preset StackingPriority = 1;
    preset Bounds = <167,167,624,197>;
    preset ColorTR = #FFE734FF;
    preset String = "You can only move tiles that are adjacent to the empty space.";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <860,10,1040,50>
  inherited method Init()
  {
    Button.OnPress=BackToMenuSlot;
  }

  $rect <20,20,160,60>
  inherited object Button
  {
    preset StackingPriority = 2;
  }

  $rect <20,20,160,60>
  object Views::Text BackToMenu
  {
    preset StackingPriority = 1;
    preset Bounds = <172,330,629,360>;
    preset ColorTR = #FFE734FF;
    preset String = "The button bellow will bring you back to the menu";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <850,110,1050,150>
  slot BackToMenuSlot
  {
    Button.Visible=false;
    Owner.DismissDialog( FindCurrentDialog(), null, null, null, null, null, false );
  }

  $rect <20,20,160,60>
  object Views::Text SixthRule
  {
    preset StackingPriority = 1;
    preset Bounds = <9,286,807,330>;
    preset ColorTR = #FFE734FF;
    preset String = "You have one minute to solve the puzzle.";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <20,20,160,60>
  object Views::Text FifthRulePartOne1
  {
    preset StackingPriority = 1;
    preset Bounds = <2,257,800,287>;
    preset ColorTR = #FFE734FF;
    preset String = "in the correct sequence or complete the picture with the empty space in its designated spot.";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  $rect <20,20,160,60>
  object Views::Text SecondRulePartTwo
  {
    preset StackingPriority = 1;
    preset Layout = Core::Layout[AlignToLeft, AlignToRight, AlignToTop];
    preset Bounds = <-1,112,783,156>;
    preset Orientation = Views::Orientation.Normal;
    preset ColorTR = #FFE734FF;
    preset String = "The puzzle begins with the tiles in a random configuration, with one tile space ";
    preset Font = Application::WordGuessingGameSmallFont;
    preset Color = #8A7429FF;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member Bounds
  $member UpdateLayout
  $member UpdateViewState
  $member r
  $member u
  $member l
  $member e
  $member s
  $member Button
  $member FirstRule
  $member SecondRuleParOne
  $member ForthRule
  $member FifthRulePartOne
  $member ThirdRule
  $member BackToMenu
  $member BackToMenuSlot
  $member SixthRule
  $member FifthRulePartOne1
  $member SecondRulePartTwo
}
